{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"sUNC Documentation","text":"<p>Welcome to the official documentation for sUNC - senS' Unified Naming Convention.</p> <p>This documentation site serves as the central knowledge base for understanding what sUNC is, how it works, and how to contribute to the project.</p> <p>Whether you're an executor developer, a curious tester, or a contributor helping document functions, you're in the right place!</p>"},{"location":"#explore-the-docs","title":"\ud83d\udcda Explore the Docs","text":"<ul> <li>What is sUNC?</li> <li>How sUNC Test Results Work</li> <li>How to Contribute</li> </ul> <p>Thank you for being here.</p>"},{"location":"About/contributing/","title":"How to contribute","text":"<p>Welcome to the sUNC documentation project! We worked tirelessly to standardise and make the documentation beautiful and readable for everyone.</p> <p>This guide outlines the official standards for contributing to the sUNC documentation, including how libraries and functions should be structured and written.</p> <p>Consistency makes our documentation readable, searchable, and enjoyable to explore.</p>"},{"location":"About/contributing/#documenting-entire-libraries","title":"Documenting entire libraries","text":"<p>Each library must be placed in a folder named after the library itself. Inside this folder, you must include a <code>README.md</code> file, which serves as the index page for that library, in both this documentation website and also when browsing the documentation repository on GitHub.</p>"},{"location":"About/contributing/#index-page-requirements","title":"Index page requirements","text":"<ul> <li>Introduce the purpose of the library</li> <li>Summarise what you can and cannot do with it</li> </ul> <p>Index pages do not need to follow this strict format, but they should aim for clarity and helpfulness.</p>"},{"location":"About/contributing/#general-documentation-style","title":"General documentation style","text":"<p>All documentation pages (including function pages and index pages) must:</p> <ul> <li>Use inline links to relevant Wikipedia, Roblox Luau, or other sUNC pages with referencing key terms.</li> <li> <p>Use the correct inline link formats, e.g.:</p> <pre><code>[`#!luau task.defer`](https://create.roblox.com/docs/reference/engine/libraries/task#defer)\n</code></pre> <p>As you can see, the example above uses a code snippet with <code>luau</code> syntax highlighting enabled, whilst also being a hyperlink to the Roblox API documentation for <code>task.defer</code>.</p> </li> </ul>"},{"location":"About/contributing/#function-documentation","title":"Function documentation","text":"<p>Each function must have its own file, named after the function (e.g. <code>newcclosure.md</code>).</p>"},{"location":"About/contributing/#title-format","title":"Title Format","text":"<p>The title of the page must be written as:</p> <pre><code># `function_name`\n</code></pre> <p>Important</p> <p>Do not include emojis in function titles.</p>"},{"location":"About/contributing/#notices","title":"Notices","text":"<p>Place all important <code>!!!</code> callouts (warnings, errors, info) immediately under the title. These should include anything the user must know before using the function.</p>"},{"location":"About/contributing/#description","title":"Description","text":"<p>Provide a description of the function directly after any notices.</p> <p>When referencing the function name, always use the code snippet format:</p> <pre><code>`#!luau function_name` allows you to do this and that.\n</code></pre>"},{"location":"About/contributing/#type-definition","title":"Type definition","text":"<p>Type definitions are important!</p> <p>You must always include a Luau-style type definition when documenting a function.</p> <p>Include the Luau type definition at the bottom of the first section, with Luau syntax highlighting but no individual line highlighting or line numbers:</p> <pre><code>function newcclosure&lt;A..., R...&gt;(functionToWrap: (A...) -&gt; R...): (A...) -&gt; R...\n</code></pre> <p>Make sure it precedes the parameters table.</p>"},{"location":"About/contributing/#parameters","title":"Parameters","text":"<p>The parameters must always be neatly described in a function, like so:</p> <pre><code>## Parameters\n\n| Parameter               | Description                         |\n|-------------------------|-------------------------------------|\n| `#!luau parameter_name` | Short description of the parameter. |\n</code></pre> <p>Use snake_case for every variable, and camelCase for parameters to easily distinguish between the two.</p> <p>There should be no horizontal rule (<code>---</code>) between the type definition and the parameters section.</p>"},{"location":"About/contributing/#providing-users-with-examples","title":"Providing users with examples","text":"<p>Every function page must include at least one example.</p> <p>Use 'Example' or 'Examples' based on how many examples you have</p> <p>To make the documentation experience more logical and also grammatically correct, please do the following: - Make the heading <code>## Example</code> if there is only one example. - Make the heading <code>## Examples</code> if there is more than one example.     Each example should have its own subheading, e.g. <code>### Example 1</code>, <code>### Example 2</code>.</p> <p>Each example should use the following format:</p> <pre><code>## Example\n\n` ` `luau title=\"Short but descriptive title for your code\" linenums=\"1\"\n-- an example is here\nprint(\"Hello world!\")\nprint(\"This is some example code\")\n` ` `\n</code></pre> <ul> <li>Examples must use <code>luau</code> syntax highlighting.</li> <li>Line numbers must be enabled using <code>linenums=\"1\"</code>.</li> <li>Each example must have a <code>title</code> describing in short what the code does.</li> </ul>"},{"location":"About/test-results/","title":"How do test results work?","text":"<p>sUNC is known for its strict tests. Ever since it was made, it was built to expose falsified environments and spoofed globaly by testing for functionality - not just checking for their presence or shallow checking.</p>"},{"location":"About/test-results/#using-the-dedicated-game","title":"Using the dedicated game","text":"<p>As of sUNC V2, all tests must be conducted in the official sUNC testing game. This game may be found in our Discord server.</p> <p>We chose to do so, because by having a dedicated server, we're able to provide you with the new sUNC Rubis test results. Which allow us to display the real results of the test, not just printed in the Roblox console.</p>"},{"location":"About/test-results/#viewing-your-test-results","title":"Viewing your test results","text":"<p>Once your test is complete, sUNC will generate a short redirect link via <code>r.sunc.su</code> like this:</p> <p></p> <p>This generated link redirects to Numelon Rubi\u0161:</p> <p></p> <p>The results page offers a clean, visually appealing UI that lays out which functions passed and which failed, why they failed, and cryptographic guarantees of authenticity.</p>"},{"location":"About/test-results/#verified-integrity","title":"Verified integrity","text":"<p>Rubi\u0161 doesn't just store your sUNC test results, it also verifies them.</p> <ul> <li>Every result is cryptographically signed by the sUNC test game servers.</li> <li>Any tampered or faked data is flagged as unverified.</li> </ul> <p>Even if someone tries to replicate the link or manually upload fake data and use it with the results viewer (since Rubi\u0161 is also a public paste service which is usable by anyone), it will not work.</p>"},{"location":"About/what-is-sunc/","title":"sUNC introduction","text":""},{"location":"About/what-is-sunc/#what-is-sunc","title":"What is \"sUNC\"?","text":"<p>sUNC stands for senS' Unified Naming Convention. It is a tool designed to check if an executor can properly run essential global functions, following the existing Unified Naming Convention.</p> <p>Unlike the original UNC (which is now outdated and prone to spoofing), sUNC ensures that functions actually work as intended, by testing them as if they were to be used in a real scenario. However, we are not in any way calling UNC \"bad\". We are simply stating that people should not be using UNC to deeply test their environment, as it was never intended to do so.</p>"},{"location":"About/what-is-sunc/#how-would-i-know-what-fails","title":"How would I know what fails?","text":"<p>We are not gatekeeping function tests, despite the script being obfuscated. You are welcome to ask the owner (@sens6222 on Discord) if you are struggling with passing certain tests. We keep it this way for now, due to executors already faking their environments to suit the original UNC.</p> <p>Note that it's also possible to see the detailed reason of a function's failure at the top of the <code>Developer Console</code> in game, or on the dedicated sUNC Rubi\u0161 site.</p>"},{"location":"About/what-is-sunc/#will-sunc-be-discontinued","title":"Will sUNC be discontinued?","text":"<p>Not in the near future, we hope. However, if sUNC were to be discontinued, we will open source the project after 1-2 months.</p>"},{"location":"About/what-is-sunc/#credits","title":"Credits","text":"<ul> <li>Original UNC Documentation</li> </ul>"},{"location":"Closures/","title":"Closures","text":"<p>The Closures library enables the inspection, modification and creation of Luau closures with precise control.</p> <p>It is one of the most powerful tools available, exposing internals in a way that Luau does not natively support out of the box.</p> <p>This library is incredibly useful for hooking functions to modify game logic to your own advantage, and any other creative uses you can think of.</p>"},{"location":"Closures/#what-is-a-closure","title":"What is a closure?","text":"<p>The term \"closure\" comes from functional programming and refers to a function plus the environment it carries (its upvalues).</p> <p>In Luau (and Lua), every function is implemented as a closure implicitly, even if it doesn't capture anything.</p>"},{"location":"Closures/#what-can-you-do","title":"What can you do?","text":"<p>With the <code>Closures</code> library, you can:</p> <ul> <li>Hook existing functions or metamethods with <code>hookfunction</code> and <code>hookmetamethod</code></li> <li>Check whether the current execution is from your script using <code>checkcaller</code> for hooking</li> <li>Clone a function while keeping the same behavior to avoid tampering, with <code>clonefunction</code></li> <li>Wrap a Luau closure into a C closure using <code>newcclosure</code></li> <li>Check a function's closure type with <code>iscclosure</code>, <code>islclosure</code> or <code>isexecutorclosure</code>.</li> <li>Hash a function with <code>getfunctionhash</code></li> </ul>"},{"location":"Closures/#what-cant-you-do","title":"What can't you do?","text":"<p>Although closure capabilities are powerful, there are natural boundaries:</p> <ul> <li>You cannot inspect true C closures' internals - they are not Lua-defined, compiled, and therefore opaque by design.</li> <li>Attempting to implement <code>newcclosure</code> in Lua (e.g. via <code>coroutine.wrap</code>) will fail sUNC verification.</li> </ul>"},{"location":"Closures/checkcaller/","title":"<code>checkcaller</code>","text":"<p><code>checkcaller</code> returns a boolean indicating whether the current function was invoked from the executor's own thread. This is useful for differentiating between your own calls and those made by the game.</p> <p>It is often used in <code>hookfunction</code> and/or <code>hookmetamethod</code>.</p> <pre><code>function checkcaller(): boolean\n</code></pre>"},{"location":"Closures/checkcaller/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Closures/checkcaller/#example","title":"Example","text":"Identifying the source of a __namecall<pre><code>local from_caller\n\nlocal original; original = hookmetamethod(game, \"__namecall\", function(...)\n    if not from_caller then\n        from_caller = checkcaller()\n    end\n\n    return original(...)\nend)\n\ntask.wait(0.1) -- Step a bit\nhookmetamethod(game, \"__namecall\", original)\n\nprint(from_caller)       -- Output: false\nprint(checkcaller())    -- Output: true (current thread)\n</code></pre>"},{"location":"Closures/clonefunction/","title":"<code>clonefunction</code>","text":"<p>Notes on <code>clonefunction</code></p> <p>The new (cloned) function returned by <code>clonefunction</code> should have the same environment as the original function.</p> <p>Any sort of modification to the original function should not affect the clone. This means that stuff like hooking the original function will leave the clone unaffected.</p> <p><code>clonefunction</code> creates and returns a new function that has the exact same behaviour as the passed function.</p> <pre><code>function clonefunction&lt;A..., R...&gt;(functionToClone: (A...) -&gt; R...): (A...) -&gt; R...\n</code></pre>"},{"location":"Closures/clonefunction/#parameters","title":"Parameters","text":"Parameter Description <code>functionToClone</code> The function to clone."},{"location":"Closures/clonefunction/#example","title":"Example","text":"Cloning functions with clonefunction<pre><code>local function dummy_function()\n    print(\"Hello\")\nend\n\nlocal cloned_function = clonefunction(dummy_function)\n\nprint(debug.info(cloned_function, \"l\")) -- Output: 1\nprint(debug.info(cloned_function, \"n\")) -- Output: dummy_function\nprint(cloned_function == dummy_function) -- Output: false\nprint(getfenv(cloned_function) == getfenv(dummy_function)) -- Output: true\n</code></pre>"},{"location":"Closures/getfunctionhash/","title":"<code>getfunctionhash</code>","text":"<p><code>getfunctionhash</code> returns the hex-represented SHA384 hash of a provided function's instructions (code) and constants.</p> <p>C closures are not supported</p> <p>This function will throw an error if called on a C closure, such as <code>print</code>, since C closures have no reliable information to hash. The error should be something along the lines of <code>lua function expected</code></p> <p>Notes on <code>getfunctionhash</code></p> <p>In order to have reliable knowledge over what the function changes, <code>constants</code> should also be added to the hash alongside the <code>l.p-&gt;code</code>. Add the constants at the beginning of the instructions, and hash that.</p> <p>We suggest following this implementation in order to keep the same functionality across multiple executors, since it will be more convenient for the users not having to change their hashes if they do migrate to a different executor.</p> <p>Full credits go to Dottik and Ragnar regarding the source provided above.</p> <pre><code>function getfunctionhash(functionToHash: (...any) -&gt; (...any)): string\n</code></pre>"},{"location":"Closures/getfunctionhash/#parameters","title":"Parameters","text":"Parameter Description <code>functionToHash</code> The function to retrieve the hash of."},{"location":"Closures/getfunctionhash/#example","title":"Example","text":"Checking the SHA384 hash of functions with getfunctionhash<pre><code>local function is_sha384_hex(hash)\n    return #hash == 96 and hash:match(\"^[0-9a-fA-F]+$\") ~= nil\nend\n\nlocal dummy_function_0 = function() end\nlocal dummy_function_1 = function(...) end\nlocal dummy_function_2 = function() end\nlocal dummy_function_3 = function() return \"Constant\" end\nlocal dummy_function_4 = function() return \"Constant2\" end\n\nprint(is_sha384_hex(getfunctionhash(dummy_function_0))) -- Output: true\nprint(getfunctionhash(dummy_function_0) == getfunctionhash(dummy_function_1)) -- Output: false\nprint(getfunctionhash(dummy_function_0) == getfunctionhash(dummy_function_2)) -- Output: true\nprint(getfunctionhash(dummy_function_3) == getfunctionhash(dummy_function_4)) -- Output: false\n</code></pre>"},{"location":"Closures/hookfunction/","title":"<code>hookfunction</code>","text":"<p>Notes on <code>hookfunction</code></p> <p>The hook should not have more upvalues than the function you want to hook. There are ways to bypass the upvalue restriction, such as using <code>newlclosure</code> or <code>newcclosure</code> to wrap the <code>hook</code></p> <p>All possible hooking closure pairs should be supported throughout L, NC, C (where NC = <code>newcclosure</code>)</p> <p><code>hookfunction</code> allows you to hook a function with another wanted function, returning the original unhooked function.</p> <pre><code>function hookfunction&lt;A1..., R1...&gt;(functionToHook: (A1...) -&gt; R1..., hook: (A1...) -&gt; R1...): (A1...) -&gt; R1...\n</code></pre>"},{"location":"Closures/hookfunction/#parameters","title":"Parameters","text":"Parameter Description <code>functionToHook</code> The function that will be hooked <code>hook</code> The function that will be used as a hook"},{"location":"Closures/hookfunction/#example","title":"Example","text":"Hooking functions with hookfunction<pre><code>local function dummy_func()\n    print(\"I am not hooked!\")\nend\n\nlocal function dummy_hook()\n    print(\"I am hooked!\")\nend\n\ndummy_func() -- Output: I am not hooked!\n\nlocal old_func = hookfunction(dummy_func, dummy_hook)\n\ndummy_func() -- Output: I am hooked!\nold_func() -- Output: I am not hooked!\n</code></pre>"},{"location":"Closures/hookmetamethod/","title":"<code>hookmetamethod</code>","text":"<p>Notes on <code>hookmetamethod</code></p> <p><code>hookmetamethod</code> can be safely implemented from within Luau, as long as <code>hookfunction</code> is already properly implemented in C++.</p> <p><code>hookmetamethod</code> takes any Luau object that can have a metatable, and attempts to hook the specified metamethod of the object. Internally, it essentially uses <code>hookfunction</code> to hook specific metamethods.</p> <pre><code>function hookmetamethod(object: { any } | userdata, metamethodName: string, hook: (...any) -&gt; (...any)): (...any) -&gt; (...any)\n</code></pre>"},{"location":"Closures/hookmetamethod/#parameters","title":"Parameters","text":"Parameter Description <code>object</code> The object which has a metatable. <code>metamethodName</code> The name of the metamethod to hook. <code>hook</code> The function that will be used as a hook."},{"location":"Closures/hookmetamethod/#example","title":"Example","text":"Easily hooking metamethods with hookmetamethod<pre><code>local original; original = hookmetamethod(game, \"__index\", function(...)\n    local key = select(2, ...)\n    print(key)\n    return original(...)\nend)\n\nlocal _ = game.PlaceId\nhookmetamethod(game, \"__index\", original) -- Restores game's __index\n\n-- Output: PlaceId\n</code></pre>"},{"location":"Closures/iscclosure/","title":"<code>iscclosure</code>","text":"<p><code>iscclosure</code> checks whether a given function is a C closure or not.</p> <pre><code>function iscclosure(func: (...any) -&gt; (...any)): boolean\n</code></pre>"},{"location":"Closures/iscclosure/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The function to check."},{"location":"Closures/iscclosure/#example","title":"Example","text":"Checking whether functions are C closures with iscclosure<pre><code>local function dummy_lua_function()\n    print(\"This is an executor Lua closure\")\nend\n\nlocal dummy_cfunction = newcclosure(function()\n    print(\"This is an Executor C Closure\")\nend)\n\nlocal dummy_standard_function = print\nlocal dummy_global_cfunction = getgc\n\nprint(iscclosure(dummy_cfunction)) -- Output: true\nprint(iscclosure(dummy_global_cfunction)) -- Output: true\nprint(iscclosure(dummy_standard_function)) -- Output: true\nprint(iscclosure(dummy_lua_function)) -- Output: false\n</code></pre>"},{"location":"Closures/isexecutorclosure/","title":"<code>isexecutorclosure</code>","text":"<p><code>isexecutorclosure</code> checks whether a given function is a closure of the executor. This also includes closures retrieved using <code>getscriptclosure</code> or <code>loadstring</code></p> <pre><code>function isexecutorclosure(func: (...any) -&gt; (...any)): boolean\n</code></pre>"},{"location":"Closures/isexecutorclosure/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The function to check."},{"location":"Closures/isexecutorclosure/#example","title":"Example","text":"Identifying executor closures with isexecutorclosure<pre><code>local function dummy_lua_function()\n    print(\"This is an executor Lua closure\")\nend\n\nlocal dummy_cfunction = newcclosure(function()\n    print(\"This is an executor C closure\")\nend)\n\nlocal dummy_standard_cfunction = print\nlocal dummy_global_cfunction = getgc\n\nprint(isexecutorclosure(dummy_lua_function)) -- Output: true\nprint(isexecutorclosure(dummy_cfunction)) -- Output: true\nprint(isexecutorclosure(dummy_global_cfunction)) -- Output: true\nprint(isexecutorclosure(dummy_standard_cfunction)) -- Output: false\n</code></pre>"},{"location":"Closures/islclosure/","title":"<code>islclosure</code>","text":"<p><code>islclosure</code> checks whether a given function is a Lua closure or not.</p> <pre><code>function islclosure(func: (...any) -&gt; (...any)): boolean\n</code></pre>"},{"location":"Closures/islclosure/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The function to check."},{"location":"Closures/islclosure/#example","title":"Example","text":"Verifying Lua closures with islclosure<pre><code>local function dummy_lua_function()\n    print(\"This is an executor Lua closure\")\nend\n\nlocal dummy_cfunction = newcclosure(function()\n    print(\"This is an executor C closure\")\nend)\n\nlocal dummy_standard_cfunction = print\n\nprint(islclosure(dummy_lua_function)) -- Output: true\nprint(islclosure(dummy_standard_cfunction)) -- Output: false\nprint(islclosure(dummy_cfunction)) -- Output: false\n</code></pre>"},{"location":"Closures/newcclosure/","title":"<code>newcclosure</code>","text":"<p>Do not implement this with coroutines</p> <p>Many executors seem to be implementing this function using <code>coroutine</code> functions in Luau. Such functions will not pass sUNC checks.</p> <p>The wrapped function must be yieldable, meaning that the function should be able to call <code>task.wait</code>, for example.</p> <p>Error spoofing</p> <p>Luau and C errors are different. You must make sure that the error that closures wrapped with <code>newcclosure</code> appear as C closure errors!</p> <p>Upvalues</p> <p>The function returned by <code>newcclosure</code> must have no upvalues.</p> <p><code>newcclosure</code> takes any Lua function and wraps it into a C closure. When the returned function is called, it invokes the original Luau closure with the provided arguments, then passes the closure's returned values back to the caller.</p> <pre><code>function newcclosure&lt;A..., R...&gt;(functionToWrap: (A...) -&gt; R...): (A...) -&gt; R...\n</code></pre>"},{"location":"Closures/newcclosure/#parameters","title":"Parameters","text":"Parameter Description <code>functionToWrap</code> A function to be wrapped."},{"location":"Closures/newcclosure/#examples","title":"Examples","text":""},{"location":"Closures/newcclosure/#example-1","title":"Example 1","text":"Basic C closure wrapping example with newcclosure<pre><code>local dummy_function = function(...)\n    return ...\nend\n\nprint(iscclosure(dummy_function)) -- Output: false\n\nlocal wrapped_function = newcclosure(dummy_function)\n\nprint(iscclosure(wrapped_function)) -- Output: true\n\nlocal function_results = wrapped_function(\"Hello\")\nprint(function_results) -- Output: Hello\n</code></pre>"},{"location":"Closures/newcclosure/#example-2","title":"Example 2","text":"<p>This example illustrates how Luau functions wrapped as a C closure should also be yieldable, therefore also showcasing how coroutine implementations of <code>newcclosure</code> would not work.</p> Yieldable C functions made with newcclosure<pre><code>local dummy_yielding_function = newcclosure(function()\n    print(\"Before\")\n    task.wait(1.5)\n    print(\"After\")\nend)\n\ndummy_yielding_function()\n-- Output:\n-- Before\n-- yield for 1.5 seconds\n-- After\n</code></pre>"},{"location":"Cryptography/","title":"Cryptography","text":"<p>Info</p> <p>sUNC does not check for every function contained within the original UNC. </p> <p>The Cryptography library provides a simple inferface for Base64 encoding and decoding.</p> <ul> <li><code>crypt.base64decode(data: string): string</code></li> <li><code>crypt.base64encode(data: string): string</code></li> </ul> <p>These allow you to convert binary data into a readable string format, and vice versa.</p>"},{"location":"Cryptography/#note-on-security","title":"\u26a0\ufe0f Note on \"Security\"","text":"<p>Everyone should hopefully be aware that Base64 is not encryption. It is a reversible encoding method, and anyone can decode it.</p> <p>Do not use Base64 to store or transmit sensitive or secure data - it offers zero protection.</p> <p>The same caution applies to the other functions in this library. Though they may function correctly, they are prone to hooking, as they are global functions. If you're looking for security, it is recommended to use a custom/third-party library.</p>"},{"location":"Cryptography/base64decode/","title":"<code>crypt.base64decode</code>","text":"<p><code>crypt.base64decode</code> decodes a Base64-encoded string back into its original form.</p> <pre><code>function crypt.base64decode(data: string): string\n</code></pre>"},{"location":"Cryptography/base64decode/#parameters","title":"Parameters","text":"Parameter Description <code>data</code> The Base64-encoded string to decode."},{"location":"Cryptography/base64decode/#example","title":"Example","text":"<pre><code>local bytecode = game:HttpGet(\"https://rubis-api.numelon.com/v2/scrap/zuxQZuM9Tnl5MRbo/raw\")\nwritefile(\"sound.mp3\", crypt.base64decode(bytecode)) -- This file should be a valid and working mp3 file.\n</code></pre>"},{"location":"Cryptography/base64encode/","title":"<code>crypt.base64encode</code>","text":"<p><code>crypt.base64encode</code> encodes a string with Base64 encoding.</p> <pre><code>function crypt.base64encode(data: string): string\n</code></pre>"},{"location":"Cryptography/base64encode/#parameters","title":"Parameters","text":"Parameter Description <code>data</code> The string to encode."},{"location":"Cryptography/base64encode/#example","title":"Example","text":"<pre><code>print(crypt.base64encode(\"DummyString\\0\\2\")) -- Output: RHVtbXlTdHJpbmcAAg==\n</code></pre>"},{"location":"Debug/","title":"Debug","text":"<p>The Debug library offers powerful tools for inspecting and modifying Luau functions at a bytecode level.</p> <p>It allows you to access constants, upvalues, stack frames, and internal structures of functions that would otherwise be hidden - making it especially useful for reverse engineering and hooking.</p>"},{"location":"Debug/#what-can-you-do","title":"What can you do?","text":"<p>With the Debug library, you can:</p> <ul> <li>Inspect constants with <code>debug.getconstants</code>, <code>debug.getconstant</code></li> <li>Modify constants using <code>debug.setconstant</code></li> <li>Access upvalues using <code>debug.getupvalues</code> and <code>debug.getupvalue</code></li> <li>Replace upvalues with <code>debug.setupvalue</code></li> <li>Read or write values from a stack frame, using <code>debug.getstack</code> and <code>debug.setstack</code></li> <li>List or retrieve function prototypes, using <code>debug.getprotos</code> and <code>debug.getproto</code></li> </ul>"},{"location":"Debug/#what-cant-you-do","title":"What can't you do?","text":"<ul> <li>You cannot access C closures with this library, such as <code>print</code></li> </ul>"},{"location":"Debug/getconstant/","title":"<code>debug.getconstant</code>","text":"<p>C closures are not supported</p> <p>This function will throw an error if called on a C closure, such as <code>print</code>, since C closures have no accessible constants.</p> <p><code>debug.getconstant</code> returns the constant at the specified index from a Luau function. If no constant exists at that index, it returns <code>nil</code> instead.</p> <p>This is useful when you want to inspect specific constant values (such as strings, numbers, or booleans) without dumping the entire list.</p> <pre><code>function debug.getconstant(func: (...any) -&gt; (...any) | number, index: number): number | string | boolean | nil\n</code></pre>"},{"location":"Debug/getconstant/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The Lua function (or stack level) whose constant to retrieve. <code>index</code> The position of the desired constant."},{"location":"Debug/getconstant/#examples","title":"Examples","text":""},{"location":"Debug/getconstant/#example-1","title":"Example 1","text":"Getting a valid constant<pre><code>local function dummy_function()\n    local dummy_string = \"foo bar\"\n    string.split(dummy_string, \" \")\nend\n\nlocal result = debug.getconstant(dummy_function, 2)\nprint(result) -- Output: string\n</code></pre>"},{"location":"Debug/getconstant/#example-2","title":"Example 2","text":"Getting an out-of-range constant<pre><code>local function dummy_function()\n    local dummy_string = \"foo bar\"\n    string.split(dummy_string, \" \")\nend\n\nlocal result = debug.getconstant(dummy_function, 3)\nprint(result) -- Output: nil\n</code></pre>"},{"location":"Debug/getconstant/#example-3","title":"Example 3","text":"Calling on a C closure should error<pre><code>print(debug.getconstant(print, 1)) -- Should error due to being a C closure\n</code></pre>"},{"location":"Debug/getconstants/","title":"<code>debug.getconstants</code>","text":"<p>C closures are not supported</p> <p>This function will throw an error if called on a C closure, such as <code>print</code>, since C closures have no accessible constants.</p> <p><code>debug.getconstants</code> returns a list of all constants used within a Luau function's bytecode. This includes literal values like numbers, strings, booleans, and <code>nil</code>.</p> <pre><code>function debug.getconstants(func: (...any) -&gt; (...any) | number): { number | string | boolean | nil }\n</code></pre>"},{"location":"Debug/getconstants/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The Lua function (or stack level) whose constants will be returned."},{"location":"Debug/getconstants/#examples","title":"Examples","text":""},{"location":"Debug/getconstants/#example-1","title":"Example 1","text":"Retrieving constants from a Luau function<pre><code>local function dummy_function()\n    local dummy_string = \"foo bar\"\n    string.split(dummy_string, \" \")\nend\n\nlocal constants = debug.getconstants(dummy_function)\nfor constant_index, constant in constants do\n    print(`[{constant_index}]: {constant}`)\nend\n\n-- Output:\n-- [1]: \"string\"\n-- [2]: \"split\"\n-- [4]: \"foo bar\"\n-- [5]: \" \"\n</code></pre>"},{"location":"Debug/getconstants/#example-2","title":"Example 2","text":"Calling on a C closure should error<pre><code>print(debug.getconstants(print)) -- Should error due to being a C closure\n</code></pre>"},{"location":"Debug/getproto/","title":"<code>debug.getproto</code>","text":"<p>C closures are not supported</p> <p>This function will throw an error if called on a C closure, such as <code>print</code>, since C closures do not contain function prototypes.</p> <p><code>debug.getproto</code> returns a specific function prototype from a Luau function by index. Optionally, it can search for active functions of the proto, if the <code>activated</code> parameter is set to <code>true</code>.</p> <p>These are internal function definitions (e.g. nested functions) that exist as part of the compiled bytecode, even if they aren't assigned or called.</p> <pre><code>function debug.getproto(func: (...any) -&gt; (...any) | number, index: number, activated: boolean?): (...any) -&gt; (...any) | { (...any) -&gt; (...any) }\n</code></pre>"},{"location":"Debug/getproto/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The Lua function (or stack level) to extract a proto from. <code>index</code> The index of the prototype to return. <code>activated?</code> If <code>true</code>, returns a table of currently active functions based on the proto."},{"location":"Debug/getproto/#examples","title":"Examples","text":""},{"location":"Debug/getproto/#example-1","title":"Example 1","text":"Retrieving nested prototypes<pre><code>local function dummy_function()\n    local function dummy_proto_1()\n        print(\"Hello\")\n    end\n    local function dummy_proto_2()\n        print(\"Hello2\")\n    end\nend\n\ndebug.getproto(dummy_function, 1)() -- Output: Hello\ndebug.getproto(dummy_function, 2)() -- Output: Hello2\n</code></pre>"},{"location":"Debug/getproto/#example-2","title":"Example 2","text":"Retrieving an active function from a proto<pre><code>local function dummy_function()\n    local function dummy_proto()\n        return \"hi\"\n    end\n    return dummy_proto\nend\n\nlocal real_proto = dummy_function()\nlocal retrieved_proto = debug.getproto(dummy_function, 1, true)[1]\n\nprint(real_proto == retrieved_proto) -- Output: true\nprint(retrieved_proto()) -- Output: hi\n</code></pre>"},{"location":"Debug/getprotos/","title":"<code>debug.getprotos</code>","text":"<p>C closures are not supported</p> <p>This function will throw an error if called on a C closure, such as <code>print</code>, since C closures do not contain function prototypes.</p> <p><code>debug.getprotos</code> returns all function prototypes defined within the specified Luau function.</p> <p>These are internal function definitions (e.g. nested functions) that exist as part of the compiled bytecode, even if they aren't assigned or called.</p> <pre><code>function debug.getprotos(func: (...any) -&gt; (...any) | number): { (...any) -&gt; (...any) }\n</code></pre>"},{"location":"Debug/getprotos/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The Lua function (or stack level) to extract protos from."},{"location":"Debug/getprotos/#example","title":"Example","text":"Getting nested function prototypes<pre><code>local function DummyFunction0()\n    local function DummyFunction1() end\n    local function DummyFunction2() end\nend\n\nfor index, proto in pairs(debug.getprotos(DummyFunction0)) do\n    print(index, debug.info(proto, \"n\"))\nend\n\n-- Output:\n-- 1 DummyFunction1\n-- 2 DummyFunction2\n</code></pre>"},{"location":"Debug/getstack/","title":"<code>debug.getstack</code>","text":"<p>C closures are not supported</p> <p>This function will throw an error if the stack level points to a C closure, such as <code>getstack(0)</code>.</p> <p><code>debug.getstack</code> retrieves values from the stack at the specified call level.</p> <p>This function is useful for inspecting local variables or arguments at different layers of the stack frame. If no index is given, all values at that stack level are returned as a list.</p> <pre><code>function debug.getstack(level: number, index: number?): any | { any }\n</code></pre>"},{"location":"Debug/getstack/#parameters","title":"Parameters","text":"Parameter Description <code>level</code> The stack level to inspect. <code>1</code> is the current function. <code>index?</code> (Optional) The specific slot/index at that stack level to read."},{"location":"Debug/getstack/#examples","title":"Examples","text":""},{"location":"Debug/getstack/#example-1","title":"Example 1","text":"Retrieving multiple values from the stack<pre><code>local count = 0\n\nlocal function recursive_function()\n    count += 1\n    if count &gt; 6 then return end\n\n    local a = 29\n    local b = true\n    local c = \"Example\"\n    a += 1\n    b = false\n    c ..= \"s\"\n\n    print(debug.getstack(1, count))\n    recursive_function()\nend\n\nrecursive_function()\n-- Output (varies depending on Count):\n-- 30\n-- false\n-- Examples\n-- function: 0x... (print)\n-- function: 0x... (getstack)\n-- etc.\n</code></pre>"},{"location":"Debug/getstack/#example-2","title":"Example 2","text":"Retrieving values from the caller's stack<pre><code>local function dummy_function()\n    return \"Hello\"\nend\n\nlocal var = 5\nvar += 1\n\n(function()\n    print(debug.getstack(2)[1]()) -- Output: Hello\n    print(debug.getstack(2)[2])   -- Output: 6\nend)()\n</code></pre>"},{"location":"Debug/getupvalue/","title":"<code>debug.getupvalue</code>","text":"<p>C closures are not supported</p> <p>This function will throw an error if called on a C closure, such as <code>print</code>, since C closures do not expose upvalues.</p> <p><code>debug.getupvalue</code> returns the upvalue at the specified index from a Luau function's closure. If the index is invalid or out of bounds, an error will occur.</p> <pre><code>function debug.getupvalue(func: (...any) -&gt; (...any) | number, index: number): any\n</code></pre>"},{"location":"Debug/getupvalue/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The Lua function (or stack level) to retrieve an upvalue from. <code>index</code> The position of the upvalue."},{"location":"Debug/getupvalue/#examples","title":"Examples","text":""},{"location":"Debug/getupvalue/#example-1","title":"Example 1","text":"Retrieving a function upvalue<pre><code>local UpFunction = function()\n    print(\"Hello from up\")\nend\n\nlocal function DummyFunction()\n    UpFunction()\nend\n\nlocal Retrieved = debug.getupvalue(DummyFunction, 1)\nRetrieved() -- Output: Hello from up\n</code></pre>"},{"location":"Debug/getupvalue/#example-2","title":"Example 2","text":"Invalid index on a function with no upvalues<pre><code>local function DummyFunction() end\n\ndebug.getupvalue(DummyFunction, 0) -- Should error\n</code></pre>"},{"location":"Debug/getupvalue/#example-3","title":"Example 3","text":"Calling on a C closure should error<pre><code>debug.getupvalue(print, 1) -- Should error due to C closure\n</code></pre>"},{"location":"Debug/getupvalues/","title":"<code>debug.getupvalues</code>","text":"<p>C closures are not supported</p> <p>This function will throw an error if called on a C closure, such as <code>print</code>, since C closures do not expose upvalues.</p> <p><code>debug.getupvalues</code> returns a list of upvalues captured by a Luau function. These are the external variables that a function closes over from its surrounding scope.</p> <p>If the function has no upvalues, the result will be an empty table.</p> <pre><code>function debug.getupvalues(func: (...any) -&gt; (...any) | number): { any }\n</code></pre>"},{"location":"Debug/getupvalues/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The Lua function (or stack level) to retrieve upvalues from."},{"location":"Debug/getupvalues/#examples","title":"Examples","text":""},{"location":"Debug/getupvalues/#example-1","title":"Example 1","text":"Retrieving upvalues from a closure<pre><code>local var1 = false\nlocal var2 = \"Hi\"\n\nlocal function dummy_function()\n    var1 = true\n    var2 ..= \", hello\"\nend\n\nfor index, value in pairs(debug.getupvalues(dummy_function)) do\n    print(index, value)\nend\n\n-- Output:\n-- 1 false\n-- 2 Hi\n</code></pre>"},{"location":"Debug/getupvalues/#example-2","title":"Example 2","text":"Calling with a function that has no upvalues<pre><code>local function dummy_function()\n    return 123\nend\n\nprint(next(debug.getupvalues(dummy_function))) -- Output: nil\n</code></pre>"},{"location":"Debug/getupvalues/#example-3","title":"Example 3","text":"Calling on a C closure should error<pre><code>print(debug.getupvalues(print)) -- Should error due to being a C closure\n</code></pre>"},{"location":"Debug/setconstant/","title":"<code>debug.setconstant</code>","text":"<p>C closures are not supported</p> <p>This function will throw an error if called on a C closure, such as <code>print</code>, since C closures have no accessible constants.</p> <p><code>debug.setconstant</code> modifies a constant at the specified index in a Luau function bytecode.</p> <p>This can be used to change hardcoded behavior within functions without modifying their source code - although it requires knowing the correct constant index beforehand.</p> <pre><code>function debug.setconstant(func: (...any) -&gt; (...any) | number, index: number, value: number | string | boolean | nil): ()\n</code></pre>"},{"location":"Debug/setconstant/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The Lua function (or stack level) whose constant to modify. <code>index</code> The position of the constant to change. <code>value</code> The new constant value to set."},{"location":"Debug/setconstant/#example","title":"Example","text":"Overwriting a constant string in a function<pre><code>local function dummy_function()\n    print(game.Name)\nend\n\ndebug.setconstant(dummy_function, 4, \"Players\")\n\ndummy_function() -- Output: Players\n</code></pre>"},{"location":"Debug/setstack/","title":"<code>debug.setstack</code>","text":"<p>C closures are not supported</p> <p>This function will throw an error if the stack level points to a C closure, such as <code>setstack(0, 1, 0)</code>.</p> <p><code>debug.setstack</code> replaces a value in a specified stack frame.</p> <p>This allows for powerful manipulation of runtime variables or arguments, particularly useful in advanced debugging or dynamic patching scenarios.</p> <pre><code>function debug.setstack(level: number, index: number, value: any): ()\n</code></pre>"},{"location":"Debug/setstack/#parameters","title":"Parameters","text":"Parameter Description <code>level</code> The stack level to target. <code>1</code> refers to the current function. <code>index</code> The index/slot in the stack frame to replace. <code>value</code> The new value to assign at that stack slot."},{"location":"Debug/setstack/#examples","title":"Examples","text":""},{"location":"Debug/setstack/#example-1","title":"Example 1","text":"Replacing the 'error' function on the stack with our own<pre><code>error(debug.setstack(1, 1, function()\n    return function()\n        print(\"Replaced\")\n    end\nend))() -- Output: Replaced\n</code></pre>"},{"location":"Debug/setstack/#example-2","title":"Example 2","text":"Replacing a numeric local in a parent scope<pre><code>local outer_value = 10\n\nlocal function inner_function()\n    outer_value += 9\n    debug.setstack(2, 1, 100)\nend\n\ninner_function()\nprint(OuterValue) -- Output: 100\n</code></pre>"},{"location":"Debug/setupvalue/","title":"<code>debug.setupvalue</code>","text":"<p>C closures not supported</p> <p>This function will throw an error if called on a C closure, such as <code>print</code>, since C closures do not expose upvalues.</p> <p><code>debug.setupvalue</code> replaces an upvalue at the specified index in a Luau function, with a new value.</p> <p>This allows for controlled modification of function state, often used in hooking or testing environments.</p> <pre><code>function debug.setupvalue(func: (...any) -&gt; (...any) | number, index: number, value: any): ()\n</code></pre>"},{"location":"Debug/setupvalue/#parameters","title":"Parameters","text":"Parameter Description <code>func</code> The function (or stack level) whose upvalue to replace. <code>index</code> The index of the upvalue to be replaced. <code>value</code> The new value to assign to the upvalue."},{"location":"Debug/setupvalue/#example","title":"Example","text":"Replacing a numeric upvalue<pre><code>local upvalue = 90\n\nlocal function dummy_function()\n    upvalue += 1\n    print(upvalue)\nend\n\ndummy_function() -- Output: 91\n\ndebug.setupvalue(dummy_function, 1, 99)\ndummy_function() -- Output: 100\n</code></pre>"},{"location":"Drawing/","title":"Drawing class","text":"<p>The <code>Drawing</code> class represents a renderable 2D object that appears on the user's screen. Every specific drawing type (e.g. <code>Circle</code>, <code>Text</code>, <code>Line</code>) inherits from this base and extends it with shape-specific properties.</p> <p>Drawing objects are not instances - they are client-only graphical primitives that do not interact with the 3D world and must be managed manually.</p>"},{"location":"Drawing/#constructor","title":"Constructor","text":"<p>Creates a new render object of the specified type. These objects render directly onto the game window and do not exist in the <code>DataModel</code>.</p> <p>Inheritance</p> <p>The returned object inherits from the base <code>Drawing</code> class, and will have specific properties based on its type.</p> <pre><code>function Drawing.new(type: string): Drawing\n</code></pre>"},{"location":"Drawing/#parameters","title":"Parameters","text":"Parameter Description <code>type</code> The type of drawing to create. Must be one of: <code>Line</code>, <code>Text</code>, <code>Image</code>, <code>Circle</code>, <code>Square</code>, <code>Quad</code>, or <code>Triangle</code>."},{"location":"Drawing/#shared-properties","title":"Shared properties","text":"<p>All drawing object types inherit the following fields:</p> Property Type Description <code>Visible</code> <code>boolean</code> Whether the object is rendered. Defaults to <code>false</code>. <code>ZIndex</code> <code>number</code> Render order; higher values appear on top. <code>Transparency</code> <code>number</code> Opacity (1 = fully opaque, 0 = invisible). <code>Color</code> <code>Color3</code> The color of the drawing. <code>__OBJECT_EXISTS</code> <code>boolean</code> Whether the drawing object exists."},{"location":"Drawing/#methods","title":"Methods","text":"Method Signature Description <code>Destroy()</code> Permanently removes the drawing from view."},{"location":"Drawing/#shape-specific-types","title":"Shape-specific types","text":"<p>Each subtype of <code>Drawing</code> exposes unique fields that define their visual representation. Below are the supported types:</p>"},{"location":"Drawing/#line","title":"Line","text":"Property Type Description <code>From</code> <code>Vector2</code> Start position of the line. <code>To</code> <code>Vector2</code> End position of the line. <code>Thickness</code> <code>number</code> Width of the line."},{"location":"Drawing/#text","title":"Text","text":"Property Type Description <code>Text</code> <code>string</code> The text content to render. <code>TextBounds</code> <code>Vector2</code> \ud83d\udd12 Computed text size (read-only). <code>Font</code> <code>Drawing.Font</code> Font to use. <code>Size</code> <code>number</code> Size of the text. <code>Position</code> <code>Vector2</code> Top-left corner of the text. <code>Center</code> <code>boolean</code> Horizontally center the text. <code>Outline</code> <code>boolean</code> Whether to draw an outline. <code>OutlineColor</code> <code>Color3</code> Outline color."},{"location":"Drawing/#image","title":"Image","text":"Property Type Description <code>Data</code> <code>string</code> Raw image byte string (e.g. from <code>readfile</code>). <code>Size</code> <code>Vector2</code> Size of the rendered image. <code>Position</code> <code>Vector2</code> Top-left corner of the image. <code>Rounding</code> <code>number</code> Amount of corner rounding (optional aesthetic)."},{"location":"Drawing/#circle","title":"Circle","text":"Property Type Description <code>NumSides</code> <code>number</code> Number of sides used to approximate the circle. <code>Radius</code> <code>number</code> Radius of the circle. <code>Position</code> <code>Vector2</code> Center point of the circle. <code>Thickness</code> <code>number</code> Outline thickness (if not filled). <code>Filled</code> <code>boolean</code> Whether the circle is filled."},{"location":"Drawing/#square","title":"Square","text":"Property Type Description <code>Size</code> <code>Vector2</code> Size of the rectangle. <code>Position</code> <code>Vector2</code> Top-left corner. <code>Thickness</code> <code>number</code> Outline thickness (if not filled). <code>Filled</code> <code>boolean</code> Whether the square is filled."},{"location":"Drawing/#quad","title":"Quad","text":"Property Type Description <code>PointA</code> <code>Vector2</code> First point. <code>PointB</code> <code>Vector2</code> Second point. <code>PointC</code> <code>Vector2</code> Third point. <code>PointD</code> <code>Vector2</code> Fourth point. <code>Thickness</code> <code>number</code> Outline thickness (if not filled). <code>Filled</code> <code>boolean</code> Whether the quad is filled."},{"location":"Drawing/#triangle","title":"Triangle","text":"Property Type Description <code>PointA</code> <code>Vector2</code> First point. <code>PointB</code> <code>Vector2</code> Second point. <code>PointC</code> <code>Vector2</code> Third point. <code>Thickness</code> <code>number</code> Outline thickness (if not filled). <code>Filled</code> <code>boolean</code> Whether the triangle is filled."},{"location":"Drawing/#examples","title":"Examples","text":""},{"location":"Drawing/#using-the-destroy-method","title":"Using the <code>Destroy</code> method.","text":"Creating a circle and destroying the drawing object<pre><code>local Camera = game.Workspace.CurrentCamera\nlocal Viewport = Camera.ViewportSize\nlocal Position = Vector2.new(Viewport.X / 2, Viewport.Y / 2)\n\nlocal circle = Drawing.new(\"Circle\")\ncircle.Radius = 50\ncircle.Color = Color3.fromRGB(255, 0, 0)\ncircle.Filled = true\ncircle.NumSides = 150\ncircle.Position = Position\ncircle.Transparency = 1\ncircle.Visible = true\n\nprint(circle.__OBJECT_EXISTS) -- Output: true\ncircle:Destroy()\nprint(circle.__OBJECT_EXISTS) -- Output: false\n</code></pre>"},{"location":"Drawing/#drawing-an-image","title":"Drawing an Image","text":"Rendering a centered image<pre><code>local Camera = game.Workspace.CurrentCamera\nlocal Viewport = Camera.ViewportSize\nlocal Position = Vector2.new(Viewport.X / 2, Viewport.Y / 2)\nlocal image = Drawing.new(\"Image\")\nimage.Data = readfile(\"your_image.png\")\nimage.Size = Vector2.new(455, 155)\nimage.Visible = true\nimage.Position = Position\n\ntask.wait(2)\nimage:Destroy()\n</code></pre>"},{"location":"Drawing/#using-the-__object_exists-property","title":"Using the <code>__OBJECT_EXISTS</code> property.","text":"Rendering a centered image<pre><code>local Camera = game.Workspace.CurrentCamera\nlocal Viewport = Camera.ViewportSize\nlocal Position = Vector2.new(Viewport.X / 2, Viewport.Y / 2)\n\nlocal circle = Drawing.new(\"Circle\")\ncircle.Radius = 50\ncircle.Color = Color3.fromRGB(255, 0, 0)\ncircle.Filled = true\ncircle.NumSides = 150\ncircle.Position = Position\ncircle.Transparency = 1\ncircle.Visible = true\n\nprint(circle.__OBJECT_EXISTS) -- Output: true\ncircle:Destroy()\nprint(circle.__OBJECT_EXISTS) -- Output: false\n</code></pre>"},{"location":"Drawing/cleardrawcache/","title":"<code>cleardrawcache</code>","text":"<p><code>cleardrawcache</code> removes all active drawing objects created with <code>Drawing.new</code>.</p> <pre><code>function cleardrawcache(): ()\n</code></pre>"},{"location":"Drawing/cleardrawcache/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Drawing/cleardrawcache/#example","title":"Example","text":"Clearing all drawing objects at once<pre><code>local camera = game.Workspace.CurrentCamera\nlocal viewport = camera.ViewportSize\nlocal pos = Vector2.new(viewport.X / 2, viewport.Y / 2)\n\nlocal circle = Drawing.new(\"Circle\")\ncircle.Radius = 50\ncircle.Color = Color3.fromRGB(255, 0, 0)\ncircle.Filled = true\ncircle.NumSides = 60\ncircle.Position = pos\ncircle.Transparency = 1\ncircle.Visible = true\n\ntask.defer(cleardrawcache)\n\nprint(circle.__OBJECT_EXISTS) -- Output: true\ntask.wait()\nprint(circle.__OBJECT_EXISTS) -- Output: false\n</code></pre>"},{"location":"Drawing/getrenderproperty/","title":"<code>getrenderproperty</code>","text":"<p><code>getrenderproperty</code> retrieves the value of a property from a <code>Drawing</code> object. This behaves identically to using <code>object[property]</code>, but is useful when working with dynamic property names or for reflection-like access.</p> <pre><code>function getrenderproperty(drawing: Drawing, property: string): any\n</code></pre>"},{"location":"Drawing/getrenderproperty/#parameters","title":"Parameters","text":"Parameter Description <code>drawing</code> A valid <code>Drawing</code> object. <code>property</code> The name of the property to retrieve."},{"location":"Drawing/getrenderproperty/#example","title":"Example","text":"Reading drawing properties<pre><code>local circle = Drawing.new(\"Circle\")\ncircle.Radius = 50\ncircle.Visible = true\n\nprint(getrenderproperty(circle, \"Radius\"))    -- Output: 50\nprint(getrenderproperty(circle, \"Visible\"))   -- Output: true\n</code></pre>"},{"location":"Drawing/isrenderobj/","title":"<code>isrenderobj</code>","text":"<p><code>isrenderobj</code> checks whether a given value is a valid <code>Drawing</code> object.</p> <p>This is useful for validation in functions or modules that work with custom render systems.</p> <pre><code>function isrenderobj(object: any): boolean\n</code></pre>"},{"location":"Drawing/isrenderobj/#parameters","title":"Parameters","text":"Parameter Description <code>object</code> The value to check for Drawing validity."},{"location":"Drawing/isrenderobj/#example","title":"Example","text":"Checking if an object is a render object<pre><code>local square = Drawing.new(\"Square\")\n\nprint(isrenderobj(square))       -- Output: true\nprint(isrenderobj(workspace))    -- Output: false\nprint(isrenderobj(\"not a draw\")) -- Output: false\n</code></pre>"},{"location":"Drawing/setrenderproperty/","title":"<code>setrenderproperty</code>","text":"<p><code>setrenderproperty</code> assigns a value to a property of a <code>Drawing</code> object. This behaves identically to <code>object[property] = value</code>, but is useful for dynamic or abstracted property access.</p> <pre><code>function setrenderproperty(drawing: Drawing, property: string, value: any): ()\n</code></pre>"},{"location":"Drawing/setrenderproperty/#parameters","title":"Parameters","text":"Parameter Description <code>drawing</code> A valid <code>Drawing</code> object. <code>property</code> The name of the property to assign. <code>value</code> The value to assign to the specified property."},{"location":"Drawing/setrenderproperty/#example","title":"Example","text":"Setting drawing properties<pre><code>local circle = Drawing.new(\"Circle\")\n\nsetrenderproperty(circle, \"Radius\", 50)\nsetrenderproperty(circle, \"Visible\", true)\n\nprint(circle.Radius)   -- Output: 50\nprint(circle.Visible)  -- Output: true\n</code></pre>"},{"location":"Environment/","title":"Environment","text":"<p>The Environment library allows access and inspection to our and Roblox's environment.</p>"},{"location":"Environment/#what-can-you-do","title":"What can you do?","text":"<p>With the Environment library, you can:</p> <ul> <li>Access and modify executor globals using <code>getgenv</code></li> <li>Modify the game global environment using <code>getrenv</code></li> <li>View collectable and living values using <code>getgc</code></li> <li>Filter garbage-collected values with fine-tuned criteria using <code>filtergc</code></li> </ul>"},{"location":"Environment/getgc/","title":"<code>getgc</code>","text":"<p><code>getgc</code> returns a list of non-dead garbage-collectable values. These include functions, userdatas, and optionally tables.</p> <pre><code>function getgc(includeTables: boolean?): { { any } | (...any) -&gt; (...any) | userdata }\n</code></pre>"},{"location":"Environment/getgc/#parameters","title":"Parameters","text":"Parameter Description <code>includeTables?</code> If <code>true</code>, also includes tables in the returned list. Defaults to <code>false</code>."},{"location":"Environment/getgc/#example-1","title":"Example 1","text":"Function-only GC scan<pre><code>local dummy_table = {}\nlocal function dummy_function() end\ntask.wait(0.05) -- Step a bit\n\nfor _, value in pairs(getgc()) do\n    if value == dummy_function then\n        print(`Found function: {dummy_function}`)\n    elseif value == dummy_table then\n        print(`Found table?: {dummy_table}`) -- This shouldn't print\n    end\nend\n</code></pre>"},{"location":"Environment/getgc/#example-2","title":"Example 2","text":"Full GC scan including tables<pre><code>local dummy_table = {}\nlocal function dummy_function() end\ntask.wait(0.05) -- Step a bit\n\nfor _, value in pairs(getgc(true)) do\n    if value == dummy_function then\n        print(`Found function: {dummy_function}`) -- Should print\n    elseif value == dummy_table then\n        print(`Found table: {dummy_table}`) -- Should also print\n    end\nend\n</code></pre>"},{"location":"Environment/getgenv/","title":"<code>getgenv</code>","text":"<p>getgenv polluting</p> <p>Modifications to a thread's global environment should not affect <code>getgenv</code>.</p> <p><code>getgenv</code> returns the executor's global environment table, which is shared across all executor-made threads.</p> <p>This environment is writable and persistent during the session, making it useful for sharing state or functions across different scripts.</p> <pre><code>function getgenv(): { any }\n</code></pre>"},{"location":"Environment/getgenv/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Environment/getgenv/#example","title":"Example","text":"getgenv shouldn't be affected by the global table/getfenv<pre><code>getgenv().dummy_val = \"value\"\ngetfenv().dummy_val_2 = 1\n\nprint(dummy_val, getgenv().dummy_val_2) -- Output: value, 1\n\ngetgenv().dummy_val = \"value2\"\ndummy_val = nil\nprint(dummy_val) -- Output: value2\n</code></pre>"},{"location":"Environment/getrenv/","title":"<code>getrenv</code>","text":"<p>Adding <code>_G</code> and <code>shared</code></p> <p>Make sure to properly implement <code>_G</code> and <code>shared</code> into the Roblox environemnt, as poor implementations will result in detection vectors!</p> <p><code>getrenv</code> returns the Roblox global environment, which is used by the entire game. Changes to this environment will affect your executor environment as well.</p> <pre><code>function getrenv(): { any }\n</code></pre>"},{"location":"Environment/getrenv/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Environment/getrenv/#example","title":"Example","text":"Overriding Roblox environment functions<pre><code>getrenv().warn = \"Hello!\"\nprint(type(warn)) -- Output: string\n\ngetrenv().game = nil\nprint(game) -- Output: nil\n</code></pre>"},{"location":"Environment/filtergc/","title":"<code>filtergc</code>","text":"<p><code>filtergc</code> allows you to retrieve specific garbage-collected values from Luau's memory, using fine-tuned filters.</p> <p>This function is most often used to find game-defined functions or internal tables by matching constants, keys, metatables, and more. It behaves similarly to <code>getgc</code>, but offers more control over what gets returned.</p> <pre><code>function filtergc(\n    filterType: \"function\" | \"table\",\n    filterOptions: FunctionFilterOptions | TableFilterOptions,\n    returnOne: boolean\n):\n    (...any) -&gt; (...any) | { [any]: any } | { (...any) -&gt; (...any) | { [any]: any } }\n</code></pre>"},{"location":"Environment/filtergc/#parameters","title":"Parameters","text":"Parameter Description <code>filterType</code> The type of value to search for. <code>filterOptions</code> A set of rules used to match functions or tables. See below. <code>returnOne?</code> If <code>true</code>, returns the first match, instead of a table of matches."},{"location":"Environment/filtergc/#filter-option-types","title":"Filter option types","text":"<p>Each filter type has its own valid fields:</p> <ul> <li>See Function Filters for matching functions by name, constants, upvalues, and more.</li> <li>See Table Filters for matching tables by keys, values, metatables, and more.</li> </ul>"},{"location":"Environment/filtergc/#notes","title":"Notes","text":"<ul> <li>Garbage-collected values must still be referenced by a live thread to be found.</li> <li>Some filters (like <code>Constants</code> or <code>Hash</code>) do not apply to C functions.</li> </ul>"},{"location":"Environment/filtergc/FunctionFilterOptions/","title":"Function filter options","text":"<p>Function filters let you refine what types of Luau functions should be returned when using <code>filtergc</code> with <code>\"function\"</code> as the filter type.</p> <p>Each key in the filter table specifies a criterion that must be matched by the function for it to be returned. You can use one or multiple fields together to narrow your results.</p>"},{"location":"Environment/filtergc/FunctionFilterOptions/#available-options","title":"Available options","text":"Key Type Description Default <code>Name</code> <code>string?</code> If provided, filters out functions which don't match this name. <code>nil</code> <code>IgnoreExecutor</code> <code>boolean?</code> If <code>true</code>, filters out functions that were created inside the executor. <code>true</code> <code>Hash</code> <code>string?</code> Filters by the hash of the function. See <code>getfunctionhash</code>. <code>nil</code> <code>Constants</code> <code>{ any }?</code> Also includes functions that contain the matching constants in the provided list. <code>nil</code> <code>Upvalues</code> <code>{ any }?</code> Also includes functions that contain the matching upvalues in the provided list. <code>nil</code>"},{"location":"Environment/filtergc/FunctionFilterOptions/#notes","title":"Notes","text":"<ul> <li>These filters work based on narrowing - the more information you provide in the filters, the more accurate the final result.</li> <li>If <code>IgnoreExecutor</code> is not explicitly set to <code>false</code>, executor-created functions are skipped by default.</li> <li>Filters like <code>Constants</code>, <code>Upvalues</code>, and <code>Hash</code> do not apply to C closures.</li> </ul>"},{"location":"Environment/filtergc/FunctionFilterOptions/#examples","title":"Examples","text":"<p>False negatives may occur</p> <p>Executing these examples multiple times in a short period of time may result in false negatives.</p>"},{"location":"Environment/filtergc/FunctionFilterOptions/#using-name-returns-a-table-by-default","title":"Using <code>Name</code> (returns a <code>table</code> by default)","text":"Matching a function by name<pre><code>local function dummy_function() end\n\nlocal retrieved = filtergc(\"function\", {\n    Name = \"dummy_function\", \n    IgnoreExecutor = false\n})\n\nprint(typeof(retrieved)) -- Output: table\nprint(retrieved[1] == dummy_function) -- Output: true\n</code></pre>"},{"location":"Environment/filtergc/FunctionFilterOptions/#using-name-with-returnone-true","title":"Using <code>Name</code> with <code>returnOne = true</code>","text":"Single match using returnOne<pre><code>local function dummy_function() \nend\n\nlocal retrieved = filtergc(\"function\", {\n    Name = \"dummy_function\", \n    IgnoreExecutor = false\n}, true)\n\nprint(typeof(retrieved)) -- Output: function\nprint(retrieved == dummy_function) -- Output: true\n</code></pre>"},{"location":"Environment/filtergc/FunctionFilterOptions/#using-hash","title":"Using <code>Hash</code>","text":"Matching a function by hash<pre><code>local function dummy_function()\n    return \"Hello\"\nend\n\nlocal dummy_function_hash = getfunctionhash(dummy_function)\n\nlocal retrieved = filtergc(\"function\", {\n    Hash = dummy_function_hash,\n    IgnoreExecutor = false\n}, true)\n\nprint(getfunctionhash(retrieved) == dummy_functionHash) -- Output: true\nprint(retrieved == dummy_function) -- Output: true\n</code></pre>"},{"location":"Environment/filtergc/FunctionFilterOptions/#matching-by-constants-and-upvalues","title":"Matching by <code>Constants</code> and <code>Upvalues</code>","text":"Matching by function constants and upvalues<pre><code>local upvalue = 5\n\nlocal function dummy_function()\n    upvalue += 1\n    print(game.Players.LocalPlayer)\nend\n\nlocal retrieved = filtergc(\"function\", {\n    Constants = { \"print\", \"game\", \"Players\", \"LocalPlayer\", 1 },\n    Upvalues = { 5 },\n    IgnoreExecutor = false\n}, true)\n\nprint(retrieved == dummy_function) -- Output: true\n</code></pre>"},{"location":"Environment/filtergc/TableFilterOptions/","title":"Table filter options","text":"<p>Table filters define what types of Luau tables should be returned when using <code>filtergc</code> with <code>\"table\"</code> as the filter type.</p> <p>Each key in the filter table specifies a condition the table must meet in order to be returned. You can use one or multiple fields together to narrow your results.</p>"},{"location":"Environment/filtergc/TableFilterOptions/#available-options","title":"Available Options","text":"Key Type Description Default <code>Keys</code> <code>{ any }?</code> If provided, also includes tables that contain all the specified keys. <code>nil</code> <code>Values</code> <code>{ any }?</code> If provided, only includes tables that contain all the specified values. <code>nil</code> <code>KeyValuePairs</code> <code>{ [any]: any }?</code> If provided, only includes tables that contain all key-value pairs in this table. <code>nil</code> <code>Metatable</code> <code>table?</code> If provided, only includes tables whose metatable matches the given one. <code>nil</code>"},{"location":"Environment/filtergc/TableFilterOptions/#notes","title":"Notes","text":"<ul> <li>These filters work based on narrowing - the more information you provide in the filters, the more accurate the result.</li> <li>If <code>Metatable</code> is used, a raw metatable comparison is performed.</li> </ul>"},{"location":"Environment/filtergc/TableFilterOptions/#examples","title":"Examples","text":"<p>False negatives may occur</p> <p>Executing these examples multiple times in a short period of time may result in false negatives.</p>"},{"location":"Environment/filtergc/TableFilterOptions/#matching-by-keys","title":"Matching by <code>Keys</code>","text":"Matching a table by key<pre><code>local dummy_table = { [\"dummy_key\"] = \"\" }\n\nlocal retrieved = filtergc(\"table\", {\n    Keys = { \"dummy_key\" },\n}, true)\n\nprint(retrieved == dummy_table) -- Output: true\n</code></pre>"},{"location":"Environment/filtergc/TableFilterOptions/#matching-by-keyvaluepairs","title":"Matching by <code>KeyValuePairs</code>","text":"Matching a table by key-value pairs<pre><code>local dummy_table = { [\"dummy_key\"] = \"dummy_value\" }\n\nlocal retrieved = filtergc(\"table\", {\n    KeyValuePairs = { [\"dummy_key\"] = \"dummy_value\" },\n}, true)\n\nprint(retrieved == dummy_table) -- Output: true\n</code></pre>"},{"location":"Environment/filtergc/TableFilterOptions/#matching-by-metatable","title":"Matching by <code>Metatable</code>","text":"Matching a table by metatable<pre><code>local dummy_table = setmetatable({}, { __index = getgenv() })\n\nlocal retrieved = filtergc(\"table\", { \n    Metatable = getmetatable(dummy_table) \n}, true)\n\nprint(retrieved == dummy_table) -- Output: true\n</code></pre>"},{"location":"Filesystem/","title":"Filesystem","text":"<p>The Filesystem library provides access to an executor's virtual file system. It enables reading, writing, creating, and deleting files and folders, as well as utility functions for interacting with content assets.</p> <p>This library is especially useful when storing persistent data, managing resources across sessions, or loading runtime content dynamically.</p>"},{"location":"Filesystem/#what-can-you-do","title":"What can you do?","text":"<p>With the Filesystem library, you can:</p> <ul> <li>Write data to a file using <code>writefile</code></li> <li>Read file contents with <code>readfile</code></li> <li>Append content using <code>appendfile</code></li> <li>List files and folders via <code>listfiles</code></li> <li>Delete files with <code>delfile</code> and folders using <code>delfolder</code></li> <li>Check if a path is a file or folder using <code>isfile</code> or <code>isfolder</code></li> <li>Create folders with <code>makefolder</code></li> <li>Dynamically load code from a file via <code>loadfile</code></li> <li>Use local assets in Roblox via <code>getcustomasset</code>, as if it were an uploaded asset</li> </ul>"},{"location":"Filesystem/#what-cant-you-do","title":"What can't you do?","text":"<ul> <li>You cannot access files outside the executor's workspace/sandboxed storage</li> <li>You cannot use file IO to interact with the real disk (e.g. <code>C:/</code> (Windows), <code>/Library</code> (macOS), etc.)</li> <li>You cannot escape the executor's <code>workspace</code> folder at all.</li> </ul>"},{"location":"Filesystem/appendfile/","title":"<code>appendfile</code>","text":"<p><code>appendfile</code> appends string content to the end of a file at the specified path. If the file does not exist, it will be created.</p> <p>This is useful for logging, accumulating data over time, or extending file contents without overwriting them.</p> <pre><code>function appendfile(path: string, contents: string): ()\n</code></pre>"},{"location":"Filesystem/appendfile/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The file path to append to. <code>contents</code> The string content to add to the file."},{"location":"Filesystem/appendfile/#example","title":"Example","text":"Appending to a file<pre><code>writefile(\"file4.txt\", \"print(\")\nappendfile(\"file4.txt\", \"'Hello')\")\nprint(readfile(\"file4.txt\")) -- Output: print('Hello')\n</code></pre>"},{"location":"Filesystem/delfile/","title":"<code>delfile</code>","text":"<p><code>delfile</code> deletes the file at the specified path if it exists.</p> <p>This is useful for cleaning up temporary data or removing no-longer-needed files at runtime.</p> <pre><code>function delfile(path: string): ()\n</code></pre>"},{"location":"Filesystem/delfile/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The path of the file to delete."},{"location":"Filesystem/delfile/#example","title":"Example","text":"Deleting a file<pre><code>writefile(\"file5.txt\", \"Hello\")\nprint(isfile(\"file5.txt\")) -- Output: true\ndelfile(\"file5.txt\")\nprint(isfile(\"file5.txt\")) -- Output: false\n</code></pre>"},{"location":"Filesystem/delfolder/","title":"<code>delfolder</code>","text":"<p><code>delfolder</code> deletes the folder at the specified path if it exists.</p> <pre><code>function delfolder(path: string): ()\n</code></pre>"},{"location":"Filesystem/delfolder/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The path of the folder to delete."},{"location":"Filesystem/delfolder/#example","title":"Example","text":"Deleting a folder<pre><code>makefolder(\"folder3\")\nprint(isfolder(\"folder3\")) -- Output: true\ndelfolder(\"folder3\")\nprint(isfolder(\"folder3\")) -- Output: false\n</code></pre>"},{"location":"Filesystem/getcustomasset/","title":"<code>getcustomasset</code>","text":"<p><code>getcustomasset</code> returns a content ID (e.g. <code>rbxasset://</code>) that can be used in Roblox APIs for loading audio, meshes, UI images, and other asset types.</p> <p>Internally, the file at the given path is copied to the game's content directory and then exposed with a usable asset URL.</p> <pre><code>function getcustomasset(path: string): string\n</code></pre>"},{"location":"Filesystem/getcustomasset/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The file path to convert into an asset ID."},{"location":"Filesystem/getcustomasset/#example","title":"Example","text":"Using getcustomasset to load and play a sound in-game<pre><code>local encoded = game:HttpGet(\"https://gitlab.com/sens3/nebunu/-/raw/main/encodedBytecode.txt\")\nwritefile(\"ExampleSound.mp3\", crypt.base64decode(encoded))\n\nlocal asset_id = getcustomasset(\"ExampleSound.mp3\")\n\nlocal sound = Instance.new(\"Sound\")\nsound.Parent = workspace\nsound.SoundId = asset_id\nsound.Volume = 0.35\nsound:Play()\n</code></pre>"},{"location":"Filesystem/isfile/","title":"<code>isfile</code>","text":"<p><code>isfile</code> checks whether a given path exists and refers to a file.</p> <p>This function is useful when validating input, confirming file existence before reading, or filtering entries returned by <code>listfiles</code>.</p> <pre><code>function isfile(path: string): boolean\n</code></pre>"},{"location":"Filesystem/isfile/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The path to check."},{"location":"Filesystem/isfile/#example","title":"Example","text":"Checking file existence<pre><code>print(isfile(\"nonexistent.txt\")) -- Output: false\nwritefile(\"file3.txt\", \"\")\nprint(isfile(\"file3.txt\")) -- Output: true\n</code></pre>"},{"location":"Filesystem/isfolder/","title":"<code>isfolder</code>","text":"<p><code>isfolder</code> checks whether a given path exists and refers to a folder.</p> <p>This is useful when verifying that a directory exists before writing files into it or listing its contents.</p> <pre><code>function isfolder(path: string): boolean\n</code></pre>"},{"location":"Filesystem/isfolder/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The path to check."},{"location":"Filesystem/isfolder/#example","title":"Example","text":"Checking folder existence<pre><code>writefile(\"file7.txt\", \"\")\nmakefolder(\"folder2\")\nprint(isfolder(\"file7.txt\")) -- Output: false\nprint(isfolder(\"folder2\"))   -- Output: true\n</code></pre>"},{"location":"Filesystem/listfiles/","title":"<code>listfiles</code>","text":"<p>Relative Paths</p> <p>Please note that paths returned by <code>listfiles</code> are relative to the workspace folder of the executor.</p> <p><code>listfiles</code> returns an array of strings representing all files and folders within the specified directory.</p> <p>This can be used to dynamically check which files exist in a folder, etc.</p> <pre><code>function listfiles(path: string): { string }\n</code></pre>"},{"location":"Filesystem/listfiles/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The path to the directory to scan."},{"location":"Filesystem/listfiles/#example","title":"Example","text":"Listing files in the root directory<pre><code>writefile(\"file1.txt\", \"\")\nwritefile(\"file2.lua\", \"\")\ntask.wait()\n\nfor _, file in listfiles(\"\") do\n    if file == \"file1.txt\" then\n        print(`Found: {file}`) -- Output: Found: file1.txt\n    end\n    if file == \"file2.lua\" then\n        print(`Found: {file}`) -- Output: Found: file2.lua\n    end\nend\n</code></pre>"},{"location":"Filesystem/loadfile/","title":"<code>loadfile</code>","text":"<p><code>loadfile</code> compiles the Lua source code from a file and returns the resulting function (chunk). This chunk runs in the global environment.</p> <p>If the file contains syntax errors, an error is thrown - just like <code>loadstring</code>. The error will appear in the  console.</p> <pre><code>function loadfile(path: string): (...any) -&gt; ...any\n</code></pre>"},{"location":"Filesystem/loadfile/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The path to the file to be loaded."},{"location":"Filesystem/loadfile/#examples","title":"Examples","text":""},{"location":"Filesystem/loadfile/#example-1","title":"Example 1","text":"Loading and executing a valid file<pre><code>writefile(\"file6.lua\", \"return 10 + ...\")\nlocal chunk = loadfile(\"file6.lua\")\nprint(chunk(1)) -- Output: 11\n</code></pre>"},{"location":"Filesystem/loadfile/#example-2","title":"Example 2","text":"Triggering a syntax error<pre><code>writefile(\"file6.lua\", \"retrn 10 + ...\")\nloadfile(\"file6.lua\") -- This will throw an error in the console\n</code></pre>"},{"location":"Filesystem/makefolder/","title":"<code>makefolder</code>","text":"<p><code>makefolder</code> creates a folder at the specified path if one does not already exist.</p> <p>This is useful for organising files into separate directories.</p> <pre><code>function makefolder(path: string): ()\n</code></pre>"},{"location":"Filesystem/makefolder/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The folder path to create."},{"location":"Filesystem/makefolder/#example","title":"Example","text":"Creating a new folder<pre><code>makefolder(\"test_folder\")\nprint(isfolder(\"test_folder\")) -- Output: true\n</code></pre>"},{"location":"Filesystem/readfile/","title":"<code>readfile</code>","text":"<p><code>readfile</code> retrieves the contents of a file at the specified path and returns it as a string.</p> <p>If the file does not exist or cannot be accessed, the function will error.</p> <pre><code>function readfile(path: string): string\n</code></pre>"},{"location":"Filesystem/readfile/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The file path to read from."},{"location":"Filesystem/readfile/#example","title":"Example","text":"Reading a file<pre><code>writefile(\"file0.txt\", \"Hello\")\nprint(readfile(\"file0.txt\")) -- Output: Hello\n</code></pre>"},{"location":"Filesystem/writefile/","title":"<code>writefile</code>","text":"<p><code>writefile</code> writes data to a file at the specified path. If the file already exists, its contents will be overwritten.</p> <p>This is one of the primary ways to persist string data within the executor's file sandbox.</p> <pre><code>function writefile(path: string, data: string): ()\n</code></pre>"},{"location":"Filesystem/writefile/#parameters","title":"Parameters","text":"Parameter Description <code>path</code> The file path to write to. <code>data</code> The string data to write into the file."},{"location":"Filesystem/writefile/#example","title":"Example","text":"Basic file writing example<pre><code>writefile(\"file.txt\", \"Hello world\")\nprint(readfile(\"file.txt\")) -- Output: Hello world\n</code></pre>"},{"location":"Instances/","title":"Instances","text":"<p>The Instances library provides direct access to and manipulation of <code>Instance</code> objects in the game world. It includes tools for listing, referencing, and firing Roblox-native interactions.</p> <p>These functions are especially useful for inspecting hidden instances, working with UI safely, or simulating player interactions with in-game objects.</p>"},{"location":"Instances/#what-can-you-do","title":"What can you do?","text":"<p>With the Instances library, you can:</p> <ul> <li>List all objects tracked by the client using <code>getinstances</code></li> <li>List nil-parented objects using <code>getnilinstances</code></li> <li>Safely clone instance references using <code>cloneref</code></li> <li>Access hidden UI containers using <code>gethui</code></li> <li>Inspect function-based properties with <code>getcallbackvalue</code></li> <li>Simulate interactions using <code>fireclickdetector</code>, <code>fireproximityprompt</code>, and <code>firetouchinterest</code></li> </ul>"},{"location":"Instances/cloneref/","title":"<code>cloneref</code>","text":"<p>Creates a safe reference to protected instances</p> <p><code>cloneref</code> returns a reference to an <code>Instance</code>. This can help avoid weak table styled detections. </p> <p><code>cloneref</code> returns a reference clone of an <code>Instance</code>. The returned object behaves identically to the original but is not strictly equal (<code>==</code>) to it.</p> <p>This is commonly used to safely interact with services such as <code>game.CoreGui</code>, making weak-table style attacks fail.</p> <pre><code>function cloneref&lt;T&gt;(object: T &amp; Instance): T\n</code></pre>"},{"location":"Instances/cloneref/#parameters","title":"Parameters","text":"Parameter Description <code>object</code> The <code>Instance</code> to clone a safe reference from."},{"location":"Instances/cloneref/#example","title":"Example","text":"Cloning a safe reference to LocalPlayer<pre><code>local players = game:GetService(\"Players\")\n\nlocal original = players.LocalPlayer\nlocal clone = cloneref(original)\n\nprint(original == clone) -- Output: false\nprint(clone.Name)        -- Output: Player's name (same as original)\n</code></pre>"},{"location":"Instances/fireclickdetector/","title":"<code>fireclickdetector</code>","text":"<p>Avoid implementing in Luau</p> <p>This function should not be implemented in Luau. Doing so exposes you to easy detection vectors.</p> <p><code>fireclickdetector</code> triggers a <code>ClickDetector</code> event. By default, it fires the <code>MouseClick</code> event.</p> <pre><code>function fireclickdetector(detector: ClickDetector, distance: number?, event: string?): ()\n</code></pre>"},{"location":"Instances/fireclickdetector/#parameters","title":"Parameters","text":"Parameter Description <code>detector</code> The <code>ClickDetector</code> to trigger. <code>distance?</code> Distance from which the click is simulated. Defaults to infinite. <code>event?</code> The event to trigger."},{"location":"Instances/fireclickdetector/#example","title":"Example","text":"Firing different ClickDetector events<pre><code>local click_detector = Instance.new(\"ClickDetector\")\n\nclick_detector.MouseClick:Connect(function(player)\n    print(`{player.Name} Fired M1`)\nend)\n\nclick_detector.RightMouseClick:Connect(function(player)\n    print(`{player.Name} Fired M2`)\nend)\n\nclick_detector.MouseHoverEnter:Connect(function(player)\n    print(`{player.Name} Fired HoverEnter`)\nend)\n\nclick_detector.MouseHoverLeave:Connect(function(player)\n    print(`{player} Fired HoverLeave`)\nend)\n\nfireclickdetector(click_detector, 0, \"MouseClick\") -- Output: Player Fired M1\nfireclickdetector(click_detector, 0, \"RightMouseClick\") -- Output: Player Fired M2\nfireclickdetector(click_detector, 0, \"MouseHoverEnter\") -- Output: Player Fired HoverEnter\nfireclickdetector(click_detector, 0, \"MouseHoverLeave\") -- Output: Player Fired HoverLeave\n</code></pre>"},{"location":"Instances/fireproximityprompt/","title":"<code>fireproximityprompt</code>","text":"<p>Avoid implementing in Luau</p> <p>This function should not be implemented in Luau. Doing so exposes you to easy detection vectors.</p> <p><code>fireproximityprompt</code> instantly triggers a <code>ProximityPrompt</code>, bypassing its <code>HoldDuration</code> and activation distance.</p> <pre><code>function fireproximityprompt(prompt: ProximityPrompt): ()\n</code></pre>"},{"location":"Instances/fireproximityprompt/#parameters","title":"Parameters","text":"Parameter Description <code>prompt</code> The <code>ProximityPrompt</code> to trigger."},{"location":"Instances/fireproximityprompt/#example","title":"Example","text":"Triggering a ProximityPrompt manually<pre><code>local part = Instance.new(\"Part\", workspace)\nlocal prompt = Instance.new(\"ProximityPrompt\", part)\nprompt.ActionText = \"Click Me\"\n\nprompt.Triggered:Connect(function(player)\n    print(player.Name .. \" triggered the prompt\")\nend)\n\nfireproximityprompt(prompt) -- Output: [YourName] triggered the prompt\n</code></pre>"},{"location":"Instances/firetouchinterest/","title":"<code>firetouchinterest</code>","text":"<p>Avoid implementing in Luau</p> <p>This function should not be implemented in Luau. Doing so exposes you to easy detection vectors.</p> <p><code>firetouchinterest</code> simulates a physical touch event between two <code>BasePart</code> objects. It can emulate both the start and end of a <code>Touched</code> event.</p> <pre><code>function firetouchinterest(part1: BasePart, part2: BasePart, toggle: boolean | number): ()\n</code></pre>"},{"location":"Instances/firetouchinterest/#parameters","title":"Parameters","text":"Parameter Description <code>part1</code> The initiating <code>BasePart</code>. <code>part2</code> The <code>BasePart</code> that should be touched. <code>toggle</code> Whether to simulate touch start or end. <code>false</code> or <code>0</code> simulates touch; <code>true</code> or <code>1</code> simulates un-touch."},{"location":"Instances/firetouchinterest/#example","title":"Example","text":"Simulating a Touched event using firetouchinterest<pre><code>local dummy_part = Instance.new(\"Part\")\ndummy_part.CFrame = CFrame.new(0, -200, 0)\ndummy_part.Anchored = true\ndummy_part.Parent = workspace\n\ndummy_part.Touched:Connect(function(part)\n    print(part.Name .. \" touched the dummy part!\")\nend)\n\nlocal player_head = game.Players.LocalPlayer.Character.Head\n\nfiretouchinterest(player_head, dummy_part, false) -- Simulate touch\ntask.wait(0.5)\nfiretouchinterest(player_head, dummy_part, true) -- Simulate un-touch\n</code></pre>"},{"location":"Instances/getcallbackvalue/","title":"<code>getcallbackvalue</code>","text":"<p><code>getcallbackvalue</code> retrieves the assigned callback property on an <code>Instance</code>, such as <code>OnInvoke</code>.</p> <p>Normally, these properties are write-only, meaning you can assign a function to them but cannot read them back. This function bypasses that limitation and exposes the function directly.</p> <pre><code>function getcallbackvalue(object: Instance, property: string): (...any) -&gt; (...any) | nil\n</code></pre>"},{"location":"Instances/getcallbackvalue/#parameters","title":"Parameters","text":"Parameter Description <code>object</code> The <code>Instance</code> that owns the callback property. <code>property</code> The name of the callback property to retrieve."},{"location":"Instances/getcallbackvalue/#example","title":"Example","text":"Retrieving a valid callback function, an unset property, and a missing property<pre><code>local dummy_bindable = Instance.new(\"BindableFunction\")\nlocal dummy_remote_function = Instance.new(\"RemoteFunction\")\n\ndummy_bindable.OnInvoke = function()\n    print(\"Hello from callback!\")\nend\n\nlocal retrieved = getcallbackvalue(dummy_bindable, \"OnInvoke\")\nretrieved() -- Output: Hello from callback!\n\nprint(getcallbackvalue(dummy_remote_function, \"OnClientInvoke\")) -- Output: nil\n</code></pre>"},{"location":"Instances/gethui/","title":"<code>gethui</code>","text":"<p>Should return a UI container with minimised detection</p> <p><code>gethui</code> returns a hidden <code>Instance</code> container used for safely storing UI elements. This container is mainly designed to avoid detections.</p> <pre><code>function gethui(): ScreenGui\n</code></pre>"},{"location":"Instances/gethui/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Instances/gethui/#example","title":"Example","text":"Creating undetectable UI in gethui<pre><code>local gui = Instance.new(\"ScreenGui\")\ngui.Parent = gethui()\ngui.Name = \"GUI\"\n\nlocal label = Instance.new(\"TextLabel\")\nlabel.Size = UDim2.fromOffset(200, 50)\nlabel.Text = \"Hello from gethui!\"\nlabel.Parent = gui\n\nprint(gethui():FindFirstChild(gui)) -- Output: GUI\n</code></pre>"},{"location":"Instances/getinstances/","title":"<code>getinstances</code>","text":"<p>Includes all memory-tracked instances</p> <p><code>getinstances</code> should be able to return instances outside of <code>game</code>.</p> <p><code>getinstances</code> retrieves every <code>Instance</code> from the registry. Which means that instances that are/were parented to <code>nil</code> will also be returned.</p> <pre><code>function getinstances(): { Instance }\n</code></pre>"},{"location":"Instances/getinstances/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Instances/getinstances/#example","title":"Example","text":"Finding a nil-parented instance<pre><code>local dummy_part = Instance.new(\"Part\")\ndummy_part.Parent = nil\n\nfor _, instance in pairs(getinstances()) do\n    if instance == dummy_part then\n        print(\"Found the dummy part!\")\n    end\nend\n</code></pre>"},{"location":"Instances/getnilinstances/","title":"<code>getnilinstances</code>","text":"<p><code>getnilinstances</code> returns a list of <code>Instance</code> objects that are currently unparented. These instances exist in memory but are no longer part of the <code>DataModel</code> hierarchy.</p> <pre><code>function getnilinstances(): { Instance }\n</code></pre>"},{"location":"Instances/getnilinstances/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Instances/getnilinstances/#example","title":"Example","text":"Detecting a detached part<pre><code>local part = Instance.new(\"Part\")\nfor _, instance in pairs(getnilinstances()) do\n    if instance == part then\n        print(\"Found our unattached part!\")\n    end\nend\n</code></pre>"},{"location":"Metatable/","title":"Metatable","text":"<p>The Metatable library enables advanced interaction with metatables in Luau. It provides direct access to core metamethods and internal table behaviours - including those normally protected or hidden via <code>__metatable</code> locks.</p> <p>This library is especially useful when trying to modify or access hidden things within locked Roblox objects.</p>"},{"location":"Metatable/#what-is-a-metatable","title":"What is a metatable?","text":"<p>A metatable in Luau is a hidden table that can change the behavior of another table. Metatables allow you to define custom behaviors like operator overloading, default values, or interception of table reads and writes using special fields like <code>__index</code> or <code>__newindex</code>.</p> <p>In Roblox, this is useful for exposing metatables of Roblox Instances so that they can be leveraged for hooking or other modifications.</p>"},{"location":"Metatable/#what-can-you-do","title":"What can you do?","text":"<p>With the Metatable library, you can:</p> <ul> <li>Retrieve hidden metatables using <code>getrawmetatable</code></li> <li>Replace a table or object's metatable with <code>setrawmetatable</code></li> <li>Control whether a table is locked using <code>setreadonly</code></li> <li>Check whether a table is locked with <code>isreadonly</code></li> </ul>"},{"location":"Metatable/getrawmetatable/","title":"<code>getrawmetatable</code>","text":"<p><code>getrawmetatable</code> returns the raw metatable of an object, even if that object has a <code>__metatable</code> field set.</p> <pre><code>function getrawmetatable(object: { any } | userdata): { [any]: any } | nil\n</code></pre>"},{"location":"Metatable/getrawmetatable/#parameters","title":"Parameters","text":"Parameter Description <code>object</code> The object whose metatable to retrieve."},{"location":"Metatable/getrawmetatable/#examples","title":"Examples","text":""},{"location":"Metatable/getrawmetatable/#example-1","title":"Example 1","text":"Retrieving the metatable of the DataModel<pre><code>local mt = getrawmetatable(game)\nprint(type(mt)) -- Output: table\nprint(mt.__index(game, \"Workspace\")) -- Output: Workspace\n</code></pre>"},{"location":"Metatable/getrawmetatable/#example-2","title":"Example 2","text":"Obtaining nil when object has no metatable set<pre><code>print(getrawmetatable(newproxy(false)))\n</code></pre>"},{"location":"Metatable/isreadonly/","title":"<code>isreadonly</code>","text":"<p><code>isreadonly</code> checks whether a table is currently set as readonly.</p> <pre><code>function isreadonly(table: { any }): boolean\n</code></pre>"},{"location":"Metatable/isreadonly/#parameters","title":"Parameters","text":"Parameter Description <code>table</code> The table to check for readonly status."},{"location":"Metatable/isreadonly/#example","title":"Example","text":"Checking if a table is readonly<pre><code>print(isreadonly({})) -- Output: false\nprint(isreadonly(getrawmetatable(game))) -- Output: true\n</code></pre>"},{"location":"Metatable/setrawmetatable/","title":"<code>setrawmetatable</code>","text":"<p><code>setrawmetatable</code> forcibly sets the metatable of a value, bypassing the <code>__metatable</code> protection field.</p> <pre><code>function setrawmetatable&lt;T&gt;(object: T &amp; ({ any } | userdata), metatable: { any }): T\n</code></pre>"},{"location":"Metatable/setrawmetatable/#parameters","title":"Parameters","text":"Parameter Description <code>object</code> The value whose metatable will be overwritten. <code>metatable</code> The new metatable to assign."},{"location":"Metatable/setrawmetatable/#example","title":"Example","text":"Overriding the metatable of a string<pre><code>local dummy_string = \"Example\"\nlocal string_metatable = setrawmetatable(dummy_string, {\n    __index = getgenv()\n})\n\nprint(string_metatable)          -- Output: Example\nprint(string_metatable.getgenv)        -- Output: function: 0x...\n</code></pre>"},{"location":"Metatable/setreadonly/","title":"<code>setreadonly</code>","text":"<p><code>setreadonly</code> sets whether a table is readonly or writable.</p> <pre><code>function setreadonly(table: { any }, state: boolean): ()\n</code></pre>"},{"location":"Metatable/setreadonly/#parameters","title":"Parameters","text":"Parameter Description <code>table</code> The table whose readonly status you want to modify. <code>state</code> <code>true</code> to lock the table, <code>false</code> to unlock it."},{"location":"Metatable/setreadonly/#example","title":"Example","text":"Unlocking a metatable<pre><code>local mt = getrawmetatable(game)\nmt.Example = \"Hello\" -- Throws an error\n\nsetreadonly(mt, false)\nmt.Example = \"Hello\"\nprint(mt.Example) -- Output: Hello\n\nsetreadonly(mt, true) -- Lock back\n</code></pre>"},{"location":"Miscellaneous/","title":"Miscellaneous","text":"<p>The Miscellaneous library contains functions that do not belong to a specific category.</p>"},{"location":"Miscellaneous/#what-can-you-do","title":"What can you do?","text":"<p>With the Miscellaneous library, you can:</p> <ul> <li>Identify the current executor and version using <code>identifyexecutor</code></li> <li>Send HTTP requests and receive full responses with <code>request</code></li> </ul>"},{"location":"Miscellaneous/#what-does-request-support","title":"What does <code>request</code> support?","text":"<p>The <code>request</code> function supports a variety of features:</p> <ul> <li>Custom HTTP methods (<code>GET</code>, <code>POST</code>, <code>PATCH</code>, <code>PUT</code>, <code>DELETE</code>)</li> <li>Request and response headers</li> <li>Request body and cookies</li> <li>Built-in executor identification headers, such as <code>PREFIX-User-Identifier</code> and <code>PREFIX-Fingerprint</code></li> </ul>"},{"location":"Miscellaneous/#what-cant-you-do","title":"What can't you do?","text":"<ul> <li><code>request</code> is synchronous and yields until the server responds - it's not suitable for parallel messaging.</li> <li>Some executors may restrict access to external domains (such as the Roblox API for account safety purposes) or block specific methods for security reasons.</li> <li><code>identifyexecutor</code> should never be relied on as a secure identifier - it's for informational purposes only.</li> </ul>"},{"location":"Miscellaneous/identifyexecutor/","title":"<code>identifyexecutor</code>","text":"<p><code>identifyexecutor</code> returns the name and version of the currently running executor.</p> <p>This function is quite self-explanatory, you use it for logging/debugging purposes, idk - its quite basic.</p> <p>The function returns a tuple of:</p> <ol> <li><code>string</code> - The name/identifier of the executor.</li> <li><code>string</code> - The version string of the executor.</li> </ol> <pre><code>function identifyexecutor(): (string, string)\n</code></pre>"},{"location":"Miscellaneous/identifyexecutor/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Miscellaneous/identifyexecutor/#example","title":"Example","text":"Getting the current executor and version<pre><code>local exec_name, exec_version = identifyexecutor()\nprint(exec_name, exec_version) -- Output: \"YourExploitName 0.0.1\"\n</code></pre>"},{"location":"Miscellaneous/request/","title":"<code>request</code>","text":"<p><code>request</code> sends a HTTP request to the given URL using the provided configuration table. It yields until the request is complete and returns a structured response.</p> <pre><code>type RequestOptions = {\n    Url: string,\n    Method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\",\n    Body: string?,\n    Headers: { [string]: string }?,\n    Cookies: { [string]: string }?\n}\n\ntype Response = {\n    Body: string,\n    StatusCode: number,\n    StatusMessage: string,\n    Success: boolean,\n    Headers: { [string]: string }\n}\n\nfunction request(options: RequestOptions): Response\n</code></pre>"},{"location":"Miscellaneous/request/#parameters","title":"Parameters","text":"Parameter Description <code>options</code> A table of fields defining the HTTP request."},{"location":"Miscellaneous/request/#requestoptions-fields","title":"<code>RequestOptions</code> Fields","text":"Field Type Description <code>Url</code> <code>string</code> The target URL. <code>Method</code> <code>string</code> The HTTP method (<code>GET</code>, <code>POST</code>, <code>PATCH</code>, or <code>PUT</code>). <code>Body</code> <code>string?</code> (Optional) The request payload. <code>Headers</code> <code>{ [string]: string }?</code> (Optional) Dictionary of HTTP headers. <code>Cookies</code> <code>{ [string]: string }?</code> (Optional) Dictionary of cookies."},{"location":"Miscellaneous/request/#response-fields","title":"<code>Response</code> Fields","text":"Field Type Description <code>Body</code> <code>string</code> The returned response body. <code>StatusCode</code> <code>number</code> The numeric HTTP status code. <code>StatusMessage</code> <code>string</code> The human-readable status description. <code>Success</code> <code>boolean</code> Whether the request was successful. <code>Headers</code> <code>{ [string]: string }</code> Dictionary of response headers."},{"location":"Miscellaneous/request/#automatically-added-headers","title":"Automatically added Headers","text":"<p>Executors will attach this unique header automatically:</p> Header Description <code>PREFIX-User-Identifier</code> Unique user ID that stays consistent across devices for the same user. <code>PREFIX-Fingerprint</code> Hardware-bound identifier (HWID) of the client's machine. <code>User-Agent</code> Executor name and version string."},{"location":"Miscellaneous/request/#examples","title":"Examples","text":""},{"location":"Miscellaneous/request/#example-1","title":"Example 1","text":"Basic GET request with fingerprint lookup<pre><code>local response = request({\n    Url = \"http://httpbin.org/get\",\n    Method = \"GET\",\n})\n\nlocal decoded = game:GetService(\"HttpService\"):JSONDecode(response.Body)\nlocal retrieved_fingerprint\n\nfor key in pairs(decoded.headers) do\n    if key:match(\"Fingerprint\") then\n        retrieved_fingerprint = key\n        break\n    end\nend\n\nprint(response.StatusCode)         -- Output: 200\nprint(response.Success)            -- Output: true\nprint(retrieved_fingerprint)        -- Output: PREFIX-Fingerprint\n</code></pre>"},{"location":"Miscellaneous/request/#example-2","title":"Example 2","text":"Basic POST request with payload<pre><code>local response = request({\n    Url = \"http://httpbin.org/post\",\n    Method = \"POST\",\n    Body = \"Example\"\n})\n\nprint(response.StatusMessage)                               -- Output: OK\nprint(response.StatusCode)                                  -- Output: 200\nprint(game:GetService(\"HttpService\"):JSONDecode(response.Body).data) -- Output: Example\n</code></pre>"},{"location":"Reflection/","title":"Reflection","text":"<p>The Reflection library allows access to and manipulation of hidden or non-scriptable properties of Instances and internal execution context. It is primarily used to bypass standard Luau restrictions in controlled environments.</p>"},{"location":"Reflection/#what-can-you-do","title":"What can you do?","text":"<p>With the Reflection library, you can:</p> <ul> <li>Read hidden instance properties using <code>gethiddenproperty</code></li> <li>Write to hidden instance properties with <code>sethiddenproperty</code></li> <li>Toggle scriptability of properties using <code>setscriptable</code></li> <li>Elevate thread permissions with <code>setthreadidentity</code></li> <li>Query the current thread's permission level with <code>getthreadidentity</code></li> </ul> <p>These identities are internally refered to as security context levels, and determine the permissions granted to a thread.</p>"},{"location":"Reflection/#what-cant-you-do","title":"What can't you do?","text":"<p>While powerful, the Reflection library carries detection risks in sensitive environments:</p> <ul> <li><code>setscriptable</code> is detectable by games that check for unusual access.</li> <li>Using these methods irresponsibly may break core game logic or introduce unintended side effects.</li> </ul>"},{"location":"Reflection/gethiddenproperty/","title":"<code>gethiddenproperty</code>","text":"<p>Avoid relying on <code>setscriptable</code> to implement this function!</p> <p>Some executors implement this function using <code>setscriptable</code>, which is limited and/or detectable.</p> <p><code>gethiddenproperty</code> retrieves the value of a hidden or non-scriptable property (e.g. <code>BinaryString</code>, <code>SharedString</code>, <code>SystemAddress</code>) from a given <code>Instance</code>, even if it would normally throw an error when accessed directly.</p> <p>This function also returns whether the accessed property was hidden.</p> <pre><code>function gethiddenproperty(instance: Instance, property_name: string): (any, boolean)\n</code></pre>"},{"location":"Reflection/gethiddenproperty/#parameters","title":"Parameters","text":"Parameter Description <code>instance</code> The instance containing the hidden property. <code>property_name</code> The name of the property to access."},{"location":"Reflection/gethiddenproperty/#example","title":"Example","text":"Reading a hidden property<pre><code>local part = Instance.new(\"Part\")\n\nprint(gethiddenproperty(part, \"Name\"))       -- Output: Part, false\nprint(gethiddenproperty(part, \"DataCost\"))   -- Output: 20, true\n</code></pre>"},{"location":"Reflection/getthreadidentity/","title":"<code>getthreadidentity</code>","text":"<p><code>getthreadidentity</code> retrieves the thread's identity of the running Luau thread.</p> <pre><code>function getthreadidentity(): number\n</code></pre>"},{"location":"Reflection/getthreadidentity/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Reflection/getthreadidentity/#example","title":"Example","text":"Checking thread identity across defer<pre><code>task.defer(function()\n    setthreadidentity(2)\n    print(getthreadidentity()) -- Output: 2\nend)\n\nsetthreadidentity(3)\nprint(getthreadidentity())     -- Output: 3\n</code></pre>"},{"location":"Reflection/sethiddenproperty/","title":"<code>sethiddenproperty</code>","text":"<p>Avoid relying on <code>setscriptable</code> to implement this function</p> <p>Some executors implement this function using <code>setscriptable</code>, which is limited and/or detectable.</p> <p><code>sethiddenproperty</code> assigns a value to a hidden or non-scriptable property of an <code>Instance</code>, even if that property is normally read-only or inaccessible.</p> <p>It returns <code>true</code> if the property is hidden and was successfully written to, or <code>false</code> if the property wasn't hidden but was still updated.</p> <pre><code>function sethiddenproperty(instance: Instance, property_name: string, property_value: any): boolean\n</code></pre>"},{"location":"Reflection/sethiddenproperty/#parameters","title":"Parameters","text":"Parameter Description <code>instance</code> The instance that owns the target property. <code>property_name</code> The name of the property to update. <code>property_value</code> The new value to assign to the property."},{"location":"Reflection/sethiddenproperty/#example","title":"Example","text":"Setting a hidden property value<pre><code>local part = Instance.new(\"Part\")\n\nprint(gethiddenproperty(part, \"DataCost\")) -- Output: 20, true\n\nsethiddenproperty(part, \"DataCost\", 100)\n\nprint(gethiddenproperty(part, \"DataCost\")) -- Output: 100, true\n</code></pre>"},{"location":"Reflection/setscriptable/","title":"<code>setscriptable</code>","text":"<p>Detection risks</p> <p><code>setscriptable</code> can expose detection vectors. Games may check whether certain properties are unexpectedly accessible, which can lead to detections.</p> <p>Limited property support</p> <p>Not all hidden properties can be obtained using this function.</p> <p><code>setscriptable</code> toggles the scriptability of a hidden or non-scriptable property on an <code>Instance</code>. When a property is made scriptable, it can be accessed or assigned through standard indexing.</p> <pre><code>function setscriptable(instance: Instance, property_name: string, state: boolean): boolean | nil\n</code></pre>"},{"location":"Reflection/setscriptable/#parameters","title":"Parameters","text":"Parameter Description <code>instance</code> The instance that owns the target property. <code>property_name</code> The name of the property to make scriptable or un-scriptable. <code>state</code> Whether to enable (<code>true</code>) or disable (<code>false</code>) scriptability."},{"location":"Reflection/setscriptable/#example","title":"Example","text":"Temporarily enabling scriptability of a property<pre><code>local part = Instance.new(\"Part\")\n\nsetscriptable(part, \"BottomParamA\", true)\nprint(part.BottomParamA) -- Output: -0.5\n\nsetscriptable(part, \"BottomParamA\", false)\nprint(part.BottomParamA) -- Throws an error\n</code></pre>"},{"location":"Reflection/setthreadidentity/","title":"<code>setthreadidentity</code>","text":"<p><code>setthreadidentity</code> sets the current Luau thread identity and capabilities matching that identity.</p> <p>This is commonly used alongside functions like <code>gethiddenproperty</code> or <code>getconnections</code> which may require elevated access.</p> <pre><code>function setthreadidentity(id: number): ()\n</code></pre>"},{"location":"Reflection/setthreadidentity/#parameters","title":"Parameters","text":"Parameter Description <code>id</code> The identity level to set the current thread to."},{"location":"Reflection/setthreadidentity/#example","title":"Example","text":"Changing thread identity for privileged access<pre><code>setthreadidentity(2)\nprint(pcall(function() return game.CoreGui end)) -- Output: false (restricted access)\n\nsetthreadidentity(8)\nprint(pcall(function() return game.CoreGui end)) -- Output: true Instance\n</code></pre>"},{"location":"Scripts/","title":"Scripts","text":"<p>The Scripts library provides advanced functions for inspecting and interacting with Lua script objects. It allows you to analyse bytecode, retrieve closures and environments, and simulate the loading or running of scripts.</p>"},{"location":"Scripts/#what-can-you-do","title":"What can you do?","text":"<p>With the Scripts library, you can:</p> <ul> <li>Read compiled bytecode from scripts using <code>getscriptbytecode</code></li> <li>Get the bytecode hash of a script using <code>getscripthash</code></li> <li>Extract the script closure using <code>getscriptclosure</code></li> <li>Access script environments with <code>getsenv</code></li> <li>Enumerate script instances using <code>getscripts</code> and <code>getrunningscripts</code></li> <li>List loaded modules via <code>getloadedmodules</code></li> <li>Determine the current script executing via <code>getcallingscript</code></li> <li>Compile and run code at runtime using <code>loadstring</code></li> </ul>"},{"location":"Scripts/getcallingscript/","title":"<code>getcallingscript</code>","text":"<p>Notes on <code>getcallingscript</code></p> <p>If a game script is executing, and <code>getcallingscript</code> is called, it must return the proper <code>Script</code>, <code>LocalScript</code>, or <code>ModuleScript</code> - even if the <code>script</code> global for said script is set to <code>nil</code>.</p> <p><code>getcallingscript</code> returns the <code>Script</code>, <code>LocalScript</code>, or <code>ModuleScript</code> that triggered the current code execution.</p> <pre><code>function getcallingscript(): BaseScript | ModuleScript | nil\n</code></pre>"},{"location":"Scripts/getcallingscript/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Scripts/getcallingscript/#example","title":"Example","text":"Detecting the calling script in a hook<pre><code>local old; old = hookmetamethod(game, \"__index\", function(self, key)\n    if not checkcaller() then\n        local caller = getcallingscript()\n        warn(\"__index access from script:\", caller and caller:GetFullName() or \"Unknown\")\n\n        hookmetamethod(game, \"__index\", old) -- Restore the original\n        return old(self, key)\n    end\n\n    return old(self, key)\nend)\n\nprint(getcallingscript()) -- Output: nil, since we called from an executor thread\n</code></pre>"},{"location":"Scripts/getloadedmodules/","title":"<code>getloadedmodules</code>","text":"<p>Returns only loaded modules</p> <p>This function only returns <code>ModuleScript</code> instances that have already been loaded using <code>require</code>. It does not return all <code>ModuleScript</code> objects in the game - for that, use <code>getscripts</code>.</p> <p><code>getloadedmodules</code> returns a list of all <code>ModuleScript</code> instances that have been loaded (e.g. <code>require</code>'d).</p> <p>This includes only modules with completed executions, and excludes any modules that errored or haven't been required yet.</p> <pre><code>function getloadedmodules(): { ModuleScript }\n</code></pre>"},{"location":"Scripts/getloadedmodules/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Scripts/getloadedmodules/#example","title":"Example","text":"Checking if a module has been loaded<pre><code>local loaded = Instance.new(\"ModuleScript\")\nlocal not_loaded = Instance.new(\"ModuleScript\")\n\npcall(require, loaded)\n\nfor _, module in pairs(getloadedmodules()) do\n    if module == loaded then\n        -- The first modulescript was found because it was required in line 4\n        print(\"Found loaded module!\")\n    elseif module == notLoaded then\n        -- The second modulescript should NOT be found because it was never required\n        print(\"This should never appear.\")\n    end\nend\n</code></pre>"},{"location":"Scripts/getrunningscripts/","title":"<code>getrunningscripts</code>","text":"<p><code>getrunningscripts</code> returns a list of all running scripts in the caller's global state. This includes <code>Script</code>, <code>LocalScript</code>, and <code>ModuleScript</code> instances - excluding CoreScripts by default.</p> <pre><code>function getrunningscripts(): { BaseScript | ModuleScript }\n</code></pre>"},{"location":"Scripts/getrunningscripts/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Scripts/getrunningscripts/#example","title":"Example","text":"Checking for active scripts in the session<pre><code>local running = game.Players.LocalPlayer.Character:FindFirstChild(\"Animate\")\nlocal inactive = Instance.new(\"LocalScript\") -- Not running because no bytecode to run\n\nfor _, script in pairs(getrunningscripts()) do\n    if script == running then\n        print(\"Found the running Animate script.\")\n    elseif script == inactive then\n        print(\"This should never print.\")\n        print(\"If this did print, then you have just experienced 1 in a quintillion chance of BITS FLIPPING from radiation. Do you live inside a nuclear reactor?\")\n    end\nend\n</code></pre>"},{"location":"Scripts/getscriptbytecode/","title":"<code>getscriptbytecode</code>","text":"<p>Notes on <code>getscriptbytecode</code></p> <p>This function should return <code>nil</code> if the script has no bytecode. This makes it easier to check for absence consistently across executors.</p> <p><code>getscriptbytecode</code> retrieves the bytecode of a <code>LocalScript</code>, <code>ModuleScript</code>, and <code>Script</code>.</p> <pre><code>function getscriptbytecode(script: BaseScript | ModuleScript): string | nil\n</code></pre>"},{"location":"Scripts/getscriptbytecode/#parameters","title":"Parameters","text":"Parameter Description <code>script</code> The script instance to retrieve the bytecode from."},{"location":"Scripts/getscriptbytecode/#example","title":"Example","text":"Reading the bytecode of a running script<pre><code>local animate = game.Players.LocalPlayer.Character:FindFirstChild(\"Animate\")\n\nprint(getscriptbytecode(animate)) -- Returns bytecode as a string\n\nprint(getscriptbytecode(Instance.new(\"LocalScript\"))) -- Output: nil\n</code></pre>"},{"location":"Scripts/getscriptclosure/","title":"<code>getscriptclosure</code>","text":"<p>Closure is compiled from the script's bytecode, not an active one</p> <p>The function returned by <code>getscriptclosure</code> is a new closure compiled from the script's bytecode. It is not the function used by the game script, but has identical metadata. This function is usually used to retrieve constants from a script.</p> <p>Not all scripts have bytecode</p> <p>If the script has no compiled bytecode, this function will return <code>nil</code>.</p> <p><code>getscriptclosure</code> creates and returns a Lua function closure from the compiled bytecode of a <code>Script</code>, <code>LocalScript</code>, or <code>ModuleScript</code>.</p> <p>This function is often used to extract constants or behaviour from scripts without needing to run them inside the game.</p> <pre><code>function getscriptclosure(script: BaseScript | ModuleScript): (...any) -&gt; (...any) | nil\n</code></pre>"},{"location":"Scripts/getscriptclosure/#parameters","title":"Parameters","text":"Parameter Description <code>script</code> The script instance to convert into a function."},{"location":"Scripts/getscriptclosure/#example","title":"Example","text":"Retrieving a script's closure<pre><code>local animate = game.Players.LocalPlayer.Character:FindFirstChild(\"Animate\")\n\nlocal closure = getscriptclosure(animate)\n\nprint(typeof(closure)) -- Output: function 0x....\n\nprint(getscriptclosure(Instance.new(\"LocalScript\"))) -- Output: nil\n</code></pre>"},{"location":"Scripts/getscripthash/","title":"<code>getscripthash</code>","text":"<p>Do not decrypt or decompress the bytecode</p> <p>The hash must be computed on the encrypted, compressed bytecode - not after any modification. This function should also return <code>nil</code> if the script has no bytecode.</p> <p><code>getscripthash</code> returns a hexadecimal format SHA-384 hash of the raw bytecode for a given <code>Script</code>, <code>LocalScript</code>, or <code>ModuleScript</code>.</p> <p>This is useful for identifying scripts by their content, especially when checking for known modules or verifying integrity.</p> <pre><code>function getscripthash(script: BaseScript | ModuleScript): string | nil\n</code></pre>"},{"location":"Scripts/getscripthash/#parameters","title":"Parameters","text":"Parameter Description <code>script</code> The script instance to hash."},{"location":"Scripts/getscripthash/#example","title":"Example","text":"Hashing a live script<pre><code>local Animate = game.Players.LocalPlayer.Character:FindFirstChild(\"Animate\")\n\nprint(getscripthash(Animate)) -- Output: 384-bit hash string\n\nprint(getscripthash(Instance.new(\"LocalScript\"))) -- Output: nil\n</code></pre>"},{"location":"Scripts/getscripts/","title":"<code>getscripts</code>","text":"<p><code>getscripts</code> returns a list of all <code>Script</code>, <code>LocalScript</code>, and <code>ModuleScript</code> instances present.</p> <p>This function excludes CoreScripts by default.</p> <pre><code>function getscripts(): { BaseScript | ModuleScript }\n</code></pre>"},{"location":"Scripts/getscripts/#parameters","title":"Parameters","text":"Parameter Description (none) This function takes no parameters."},{"location":"Scripts/getscripts/#example","title":"Example","text":"Locating a known script instance<pre><code>local dummy_script = Instance.new(\"LocalScript\")\ndummy_script.Name = \"TestScript\"\n\nfor _, script in pairs(getscripts()) do\n    if script == dummy_script then\n        print(\"Found the dummy script!\")\n    end\nend\n</code></pre>"},{"location":"Scripts/getsenv/","title":"<code>getsenv</code>","text":"<p>Only works on active scripts</p> <p>This function will throw an error if the script is not actively running or if it's running on a different Luau VM - such as an Actor.</p> <p><code>getsenv</code> returns the global environment table of a given <code>Script</code>, <code>LocalScript</code>, or <code>ModuleScript</code>.</p> <p>This environment contains all global variables, functions available to the target script, such as custom-defined functions or state values.</p> <pre><code>function getsenv(script: BaseScript | ModuleScript): { [any]: any }\n</code></pre>"},{"location":"Scripts/getsenv/#parameters","title":"Parameters","text":"Parameter Description <code>script</code> The script instance whose environment should be retrieved."},{"location":"Scripts/getsenv/#example","title":"Example","text":"Accessing a script's internal environment<pre><code>local animate = game.Players.LocalPlayer.Character:FindFirstChild(\"Animate\")\n\nlocal env = getsenv(animate)\n\nprint(typeof(env.onSwimming)) -- Output: function\n</code></pre>"},{"location":"Scripts/loadstring/","title":"<code>loadstring</code>","text":"<p>Unsafe by design</p> <p>Compiles the given string, and returns it runnable in a function. The environment must become unsafe after this function is called due to it allowing the modification of globals uncontrollably (see setfenv/getfenv documentation).</p> <p>Notes on <code>loadstring</code></p> <p>If the source compiles sucecssfully, you will get a runnable function that, when called, will execute the source you provided along with the passed arguments. If the source fails to compile, you will instead receive <code>nil</code> alongside the error, explaining what went wrong.</p> <pre><code>function loadstring&lt;A...&gt;(source: string, chunkname: string?): (((A...) -&gt; any) | nil, string?)\n</code></pre>"},{"location":"Scripts/loadstring/#parameters","title":"Parameters","text":"Parameter Description <code>source</code> The source code string to compile. <code>chunkname?</code> Custom chunk name."},{"location":"Scripts/loadstring/#examples","title":"Examples","text":""},{"location":"Scripts/loadstring/#example-1","title":"Example 1","text":"Compiling and running source code successfully<pre><code>loadstring([[\n    placeholder = {\"Example\"}\n]])()\n\nprint(placeholder[1]) -- Output: Example\n</code></pre>"},{"location":"Scripts/loadstring/#example-2","title":"Example 2","text":"Using a custom chunk name while also getting an error<pre><code>local func, err = loadstring(\"Example = \", \"CustomChunk\")\n\nprint(func) -- Output: nil\nprint(err)  -- Output: [string \"CustomChunk\"]:1: Expected identifier when parsing expression, got &lt;eof&gt;\n</code></pre>"},{"location":"Signals/","title":"Signals","text":"<p>The Signals library provides functions for inspecting and manipulating <code>RBXScriptSignal</code> and <code>RBXScriptConnection</code> objects.</p>"},{"location":"Signals/#what-is-a-signal","title":"What is a signal?","text":"<p>A signal in Roblox is an event emitter - an object that can have functions connected to it, which are triggered when something happens. For example, <code>Part.Touched</code> is a signal that fires when something touches a part.</p> <p>Signals are backed by objects called connections, which are instances of an <code>RBXScriptConnection</code>.</p> <p>Exploits will return their own custom connection object when using <code>getconnections</code>.</p>"},{"location":"Signals/#what-can-you-do","title":"What can you do?","text":"<p>With the Signals library, you can:</p> <ul> <li>Get all connections attached to a signal using <code>getconnections</code>.</li> <li>Fire a signal's Lua connections using <code>firesignal</code>.</li> <li>Replicate signals to the server with <code>replicatesignal</code>, if supported by the signal.</li> </ul> <p>For a list of known replicable signals, click this.</p>"},{"location":"Signals/Connection/","title":"The <code>Connection</code> object","text":"<p>Notes on the <code>object</code></p> <p>The retrieved connection object will only have the listed methods and fields, since it's a custom object</p> <p>A <code>Connection</code> object represents an active link to a signal's callback. These are returned by <code>getconnections</code> and allow inspection and manipulation over connections/signals.</p>"},{"location":"Signals/Connection/#fields","title":"Fields","text":"Field Type Description <code>Enabled</code> <code>boolean</code> Whether the connection is currently active and will respond to events. <code>ForeignState</code> <code>boolean</code> <code>true</code> if the connection was made from a foreign Lua state (e.g. CoreScript). <code>LuaConnection</code> <code>boolean</code> <code>true</code> if the connection was created from Luau, not C or foreign code. <code>Function</code> <code>(...any) -&gt; (...any)?</code> The bound function, or <code>nil</code> if foreign or non-Luau contexts. <code>Thread</code> <code>thread?</code> The thread that created the connection, or <code>nil</code> in foreign or non-Luau contexts. <p>Foreign and C-state behavior</p> <p>If the connection originates from a foreign Lua state or is a C-level connection, <code>Function</code> and <code>Thread</code> will be <code>nil</code> and their <code>ForeignState</code> property will be <code>true</code>. This is due to neither <code>Function</code> nor <code>Thread</code> existing on the current Luau VM.</p>"},{"location":"Signals/Connection/#methods","title":"Methods","text":"Method Signature Description <code>Connection:Fire(...: any): ()</code> Fires the connected function with given arguments. <code>Connection:Defer(...: any): ()</code> Defers execution using <code>task.defer</code>. <code>Connection:Disconnect(): ()</code> Disconnects the connection from the signal. <code>Connection:Disable(): ()</code> Prevents the connection from receiving events. <code>Connection:Enable(): ()</code> Re-enables a previously disabled connection."},{"location":"Signals/firesignal/","title":"<code>firesignal</code>","text":"<p>Firing mode</p> <p>This function will invoke all the connections of the signal immediately, ignoring the <code>Workspace.SignalBehaviour</code> property.</p> <p><code>firesignal</code> Invokes all Lua connections connected to a given <code>RBXScriptSignal</code>.</p> <pre><code>function firesignal(signal: RBXScriptSignal, ...: any?)\n</code></pre>"},{"location":"Signals/firesignal/#parameters","title":"Parameters","text":"Parameter Description <code>signal</code> The signal whose connections you want to manually fire. <code>...?</code> The arguments to pass to the connected functions."},{"location":"Signals/firesignal/#example","title":"Example","text":"Manually firing a signal with and without arguments<pre><code>local part = Instance.new(\"Part\")\n\npart.ChildAdded:Connect(function(arg1)\n    print(typeof(arg1))\nend)\n\nfiresignal(part.ChildAdded)            -- Output: nil\nfiresignal(part.ChildAdded, workspace) -- Output: Instance\n</code></pre>"},{"location":"Signals/getconnections/","title":"<code>getconnections</code>","text":"<p><code>getconnections</code> retrieves a list of <code>Connection</code> objects currently attached to a given <code>RBXScriptSignal</code>.</p> <pre><code>function getconnections(signal: RBXScriptSignal): {Connection}\n</code></pre>"},{"location":"Signals/getconnections/#parameters","title":"Parameters","text":"Parameter Description <code>signal</code> The signal to inspect for active connections."},{"location":"Signals/getconnections/#example","title":"Example","text":"Inspecting and invoking a Luau connection<pre><code>local folder = Instance.new(\"Folder\")\nfolder.ChildAdded:Connect(function()\n    return \"Triggered\"\nend)\n\nlocal connection = getconnections(folder.ChildAdded)[1] -- First connection in the list\nprint(connection.Function())     -- Output: Triggered\nconnection:Fire() -- Same as above, Output: Triggered\nprint(typeof(connection.Thread)) -- Output: thread\n</code></pre>"},{"location":"Signals/getconnections/#example-2","title":"Example 2","text":"Accessing a foreign/C connection<pre><code>local cconnection = getconnections(game.Players.LocalPlayer.Idled)[1]\nprint(cconnection.Function)  -- Output: nil\nprint(cconnection.Thread)    -- Output: nil\n</code></pre>"},{"location":"Signals/replicatesignal/","title":"<code>replicatesignal</code>","text":"<p>Signal arguments must match</p> <p>Some signals require specific argument structures. If incorrect arguments are passed, an error must be thrown.</p> <p>Notes on <code>#!replicatesignal</code></p> <p>For an accurate result from the examples, test the function in our game.</p> <p>If possible, replicates the signal to the server with the provided arguments. The arguments must also match accordingly to the signal itself. To know a signal's arguments, visit this.</p> <pre><code>function replicatesignal(signal: RBXScriptSignal, ...: any?)\n</code></pre>"},{"location":"Signals/replicatesignal/#parameters","title":"Parameters","text":"Parameter Description <code>signal</code> The signal to replicate to the server. <code>...?</code> Arguments to pass to the signal."},{"location":"Signals/replicatesignal/#examples","title":"Examples","text":""},{"location":"Signals/replicatesignal/#example-1","title":"Example 1","text":"Replicating a ClickDetector interaction<pre><code>local detector = workspace.replicatesigmal.ClickDetector\nreplicatesignal(detector.MouseActionReplicated, game.Players.LocalPlayer, 0)\ntask.wait(0.1)\n\nprint(game.Players.LocalPlayer:GetAttribute(\"MouseClickReplicated\")) -- Output: true\n</code></pre>"},{"location":"Signals/replicatesignal/#example-2","title":"Example 2","text":"Incorrect argument usage<pre><code>local ui_frame = game.Players.LocalPlayer.PlayerGui.ScreenGui.Frame\n\n-- These will throw an error.\nreplicatesignal(ui_frame.MouseWheelForward)\nreplicatesignal(ui_frame.MouseWheelForward, 121)\n\n-- This succeeds\nreplicatesignal(ui_frame.MouseWheelForward, 121, 214)\ntask.wait(0.1)\n\nprint(game.Players.LocalPlayer:GetAttribute(\"MouseWheelForwardReplicated\")) -- Output: true\n</code></pre>"},{"location":"WebSocket/","title":"WebSocket class","text":"<p>The <code>WebSocket</code> class provides a lightweight interface for establishing and working with WebSocket connections. It allows scripts to send and receive messages over a persistent connection to a WebSocket server.</p> <p>Keep in mind that this is client-only, meaning you won't be able to create a WebSocket server.</p>"},{"location":"WebSocket/#constructor","title":"Constructor","text":"<p>Attempts to create a new connection to the provided URL. The URL must be a valid WebSocket server URL, typically starting with <code>ws://</code> (unsecure) or <code>wss://</code> (secure).</p> <pre><code>function WebSocket.connect(url: string): WebSocket\n</code></pre>"},{"location":"WebSocket/#parameters","title":"Parameters","text":"Parameter Description <code>url</code> A WebSocket URL."},{"location":"WebSocket/#events","title":"Events","text":"<p>Signals that allow you handle events that occur during the WebSocket's lifetime, such as opening, receiving messages, or closing.</p> Event Description <code>OnMessage(message: string): ()</code> Triggered when a message is received over the WebSocket connection. <code>OnClose(): ()</code> Triggered when the WebSocket connection closes."},{"location":"WebSocket/#methods","title":"Methods","text":"Method Description <code>Send(message: string): ()</code> Send a message over the WebSocket connection. <code>Close(): ()</code> Closes the WebSocket connection."},{"location":"WebSocket/#examples","title":"Examples","text":""},{"location":"WebSocket/#using-the-onmessage-event-and-send-method","title":"Using the <code>OnMessage</code> event, and <code>Send</code> method","text":"Responding to incoming messages<pre><code>local ws = WebSocket.connect(\"ws://echo.websocket.events\")\nws.OnMessage:Connect(function(message)\n    print(message)\nend)\nws:Send(\"Hello\") -- Output: Hello\n</code></pre>"},{"location":"WebSocket/#using-the-onclose-event-and-close-method","title":"Using the <code>OnClose</code> event, and <code>Close</code> method","text":"Receive a closing message and catch it via OnClose<pre><code>local ws = WebSocket.connect(\"ws://echo.websocket.events\")\nws.OnClose:Connect(function()\n    print(\"Closed\")\nend)\nws:Close() -- Output: Closed\n</code></pre>"}]}